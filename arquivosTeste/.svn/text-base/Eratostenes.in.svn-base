module Eratostenes;

    const MAX_N = 1000;
          outra_constante = 5000;

    var   sieve: array [MAX_N + 1] of boolean;
    
    procedure start_sieve();
        var i: integer;
        begin
        	i := 0;
        	while i <= MAX_N do
        	    sieve[i] := true;
        	    i := i + 1
            end
        end start_sieve;
    
    procedure step_sieve(var p : integer);
        var i: integer;
        begin
            i := p * p;
            while i <= MAX_N do
                sieve[i] := false;
                i := i + p
            end
        end step_sieve;
    
    procedure do_sieve() : integer;
        var p: integer;
        begin
        	p := 2;
        	while p <= MAX_N do
        	    step_sieve(p);
        	    while p <= MAX_N and not sieve[p] do
                	p := p + 1
                end
            end
        end do_sieve;
    
    procedure print_primes() : integer;
        var p, k, m: integer;
        begin
        	p := 2;
        	while p <= MAX_N do
        	    if sieve[p] then
        	    	writeln(p)
        	    end;
        	    p := p + 1
            end
        end print_primes;
begin
	start_sieve();
	do_sieve();
	print_primes()
end Eratostenes.