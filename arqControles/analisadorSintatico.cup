package laxer;
import java_cup.runtime.*;
import controle.*;
import io.*;
import SymbolTable.*;

action code {:

arquivos arq = new arquivos(); 
private SymbolTable ts = new SymbolTable();
	private final int CONST = 1;
	private final int FUN = 2;
	private final int MODULE = 3;
	private final int PARAM = 4;
	private final int UNDECL = 5;
	private final int VAR = 6;
:};

parser code {:



	public void report_error(String message, Object info) {

		System.out.print(message);

		if (!(info instanceof Symbol))
			return;
		Symbol symbol = (Symbol) info;

		if (symbol.left < 0 || symbol.right < 0)
			return;

		System.out.println(" at line " + symbol.left + ", column "
				+ symbol.right);
	}
	
:}; 

terminal IF, VAR, PROCEDURE, BEGIN, END, MODULE, INTEGER, BOOLEAN, WHILE, DO, READ, WRITELN, REPEAT, UNTIL, THEN, ELSE, AND, OR, NOT, REAL, ARRAY, OF, WRITE, SIZE, CONST, ID, NUMBER, OPAR, CPAR, OOPAR, OCPAR, PONTOVIRGULA, VIRGULA, PONTO, IGUAL, ATRI, PONTOPONTO, RELOP, MULTOP, ADDLOP, ELSIF, TRUE, FALSE;
non terminal module;

non terminal Decla vartype, arraytype, idlist, procdecl, procdecl_op, procheader, procheader_op, procbody, formalpars, formalpars_op, formalpars_list, fpsection, constdecl, fpsection_op, statements, statements_list,vardecl, declarations, decl_list, const_opt, var_opt, simpletype;
non terminal Exp expression, andexp, relexp, aritexp, term, factor, primary, literal, proccall, variable, actualpar, actualpar_op, actualpar_list,arraytype_op;
non terminal Com statement, assignment, conditional, conditional_list, conditional_op, repetition, io_statement;



precedence left ADDLOP;
precedence left MULTOP;

start with module;

module ::= MODULE ID:id1 PONTOVIRGULA {: 
				ModuleInfo inf= new ModuleInfo();
				inf.setName(id1.toString());
				inf.setDeclared_line(CUP$parser$act_num);
				inf.setScope_level(ts.getScopeLevel());
				ts.insert(id1.toString(), inf); 
			:} declarations:d BEGIN statements:s  END ID:id2 PONTO 
			{: 
				if(ts.at_current_scope(id2.toString())){
					Info info = ts.get_info(ts.lookup(id2.toString()));
					if(info.category() != MODULE){
						System.out.println("wrong id ended at "+CUP$parser$act_num);
					}
				}else { 
					System.out.println("wrong id ended at "+CUP$parser$act_num);
				}
				
				RESULT =new Module(ts.lookup(id1.toString()),d,s,ts.lookup(id2.toString()));
				arq.addConteudo("module ::= MODULE ID PONTOVIRGULA declarations BEGIN statements END ID PONTO -- Linha do lookahead:"+CUP$parser$act_num+"\n");
				ts.remove_scope();
			:};

			
constdecl ::= constdecl:c ID:id RELOP:r expression:e {: 
				if(!r.equals("=")){
					System.out.println("Const Aceita somente = ");
					break; 
					goo.podeContinuar= false;
				}
				if(ts.at_current_scope(id.toString())){
				System.out.println("variable "+id.toString()+" is already declared");
				}
				else{
					ConstInfo inf= new ConstInfo();
					inf.setName(id.toString());
					inf.setTypeOld("INTEGER");
					inf.setDeclared_line(CUP$parser$act_num);
					inf.setScope_level(ts.getScopeLevel());
					ts.insert(id.toString(), inf); 
					}
				:} PONTOVIRGULA
			{:
				RESULT = new DeclaDeclaDecla(c,new DeclaConst(ts.lookup(id.toString()),e));
				arq.addConteudo("constdecl ::= constdecl ID IGUAL Exp PONTOVIRGULA -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			| CONST 
			{:
				arq.addConteudo("constdecl ::= CONST -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};
			
vardecl ::= vardecl:v idlist:i PONTOPONTO vartype:var PONTOVIRGULA 
			{:
						String type= "";
				if(var instanceof DeclaArrayType){
					DeclaArrayType temp = (DeclaArrayType) var;
					type= ((DeclaVartype)temp.getDecla()).getVartype();
				}else {
					type= ((DeclaVartype)var).getVartype();
				}
				int[] values=ts.current_scope().get_values();
				Info infoaux;
				for(int x= 0;x< values.length;x++)
				{
					infoaux=ts.get_info(values[x]);
					if(infoaux.category()==VAR && infoaux.getTypeOld().equals("DEFINIR")){
						infoaux.setTypeOld(type);
						if (var instanceof DeclaArrayType) infoaux.setTypeOld("ARRAY"+type);
						ts.edit_info(values[x],(VarInfo)infoaux);
					}
				}
				RESULT = new DeclaDeclaDecla(v,new DeclaDeclaDecla(i,var));
				arq.addConteudo("vardecl ::= vardecl idlist PONTOPONTO nad PONTOVIRGULA  -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			| VAR 
			{:
				arq.addConteudo("vardecl ::= VAR -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};	
			
idlist ::= idlist:i VIRGULA ID:id 
			{: 
				int idPos  = Integer.MAX_VALUE;
				if(ts.at_current_scope(id.toString())){
				System.out.println("variable "+id.toString()+" is already declared");
				}
				else{
					VarInfo inf= new VarInfo();
					inf.setName(id.toString());
					inf.setDeclared_line(CUP$parser$act_num);
					inf.setScope_level(ts.getScopeLevel());
					inf.setTypeOld("DEFINIR");
					idPos = ts.insert(id.toString(), inf); 
					RESULT =new DeclaIdList(ts.lookup(id.toString()),i);
					arq.addConteudo("idlist_list ::= idlist_list VIRGULA ID -- Linha do lookahead:"+CUP$parser$act_num+"\n");
				}
			:}|ID:id
			{:
				int idPos  = Integer.MAX_VALUE;
				if(ts.at_current_scope(id.toString())){
				System.out.println("variable "+id.toString()+" is already declared");
				}
				else{
					VarInfo inf= new VarInfo();
					inf.setName(id.toString());
					inf.setDeclared_line(CUP$parser$act_num);
					inf.setScope_level(ts.getScopeLevel());
					inf.setTypeOld("DEFINIR");
					idPos = ts.insert(id.toString(), inf);
					RESULT =new DeclaId(ts.lookup(id.toString()));
					arq.addConteudo("idlist_list ::= ID -- Linha do lookahead:"+CUP$parser$act_num+"\n");
				}
			:};		

vartype ::= simpletype:s
			{:
			RESULT=s;
			:}
			| arraytype:a {: 
			RESULT =a;
			arq.addConteudo("vartype ::= arraytype -- Linha do lookahead:"+CUP$parser$act_num+"\n"); 
			:};
			
simpletype ::= BOOLEAN {: 
			RESULT = new DeclaVartype("BOOLEAN");
			arq.addConteudo("vartype ::= BOOLEAN -- Linha do lookahead:"+CUP$parser$act_num+"\n"); 
			:}
			| INTEGER {: 
			RESULT = new DeclaVartype("INTEGER");
			arq.addConteudo("vartype ::= INTEGER -- Linha do lookahead:"+CUP$parser$act_num+"\n"); 
			:};
arraytype ::= ARRAY arraytype_op:a OF simpletype:s
			{:	
				RESULT =new DeclaArrayType( a, s);
				arq.addConteudo("arraytype ::= ARRAY arraytype_op OF simpletype -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};
			
arraytype_op ::= expression:e
			{:
				RESULT =e;
				arq.addConteudo("arraytype_op ::= expression -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			|
			{:
				arq.addConteudo("arraytype_op ::=  -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};
			
procdecl ::= procheader:p PONTOVIRGULA procdecl_op:pop 
			{:
				RESULT =new DeclaDeclaDecla(p, pop);
				arq.addConteudo("procdecl ::= procheader PONTOVIRGULA procdecl_op -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};
			
procdecl_op ::= procbody:p 
			{:
				RESULT =p;
				arq.addConteudo("procdecl_op ::= procbody  -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			|
			{:
				ts.remove_scope();
				arq.addConteudo("procdecl_op ::=  -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};
			
procheader ::= PROCEDURE ID:i {: 
				if(ts.at_current_scope(i.toString())){
				System.out.println("variable "+i.toString()+" is already declared");
				}
				else{
					FunInfo inf= new FunInfo();
					inf.setName(i.toString());
					inf.setDeclared_line(CUP$parser$act_num);
					inf.setScope_level(ts.getScopeLevel());
					inf.setTypeOld("DEFINIR");
					ts.insert(i.toString(), inf); 
					ts.create_scope(); 
				}
				

				:} formalpars:f procheader_op:p
			{:
				String type = "DEFINIR";
				if(p != null) type = ((DeclaVartype)p).getVartype();
				int[] values=ts.current_scope().get_values();
				Info infoaux;
				
				int index = ts.lookup(i.toString());

				infoaux=ts.get_info(index);
				if(infoaux.category()== FUN && infoaux.getTypeOld().equals("DEFINIR")){
					infoaux.setTypeOld(type);
					ts.edit_info(index,(FunInfo)infoaux);
				}
				
							VarInfo inf = new VarInfo();
			inf.setName("result");
			inf.setTypeOld(type);
			Type t = Decla.VOID;
			if(type.equals("INTEGER")){
				t = Decla.INT;
			}else if(type.equals("BOOLEAN")){
				t = Decla.BOOL;
			}
			inf.setType(t);
			ts.insert("result", inf);
				
				
				RESULT =new DeclaProcHeader(ts.lookup(i.toString()),f,p);
				arq.addConteudo("procheader ::= PROCEDURE ID formalpars procheader_op -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};
			
procheader_op ::= PONTOPONTO vartype:v
			{:
				RESULT =v;
				arq.addConteudo("procheader_op ::= PONTOPONTO vartype -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			|
			{:
				arq.addConteudo("procheader_op ::=  -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};	
			
procbody ::= declarations:d BEGIN statements:s END ID:id
			{:
				ts.remove_scope();
				if(ts.at_current_scope(id.toString())){
					Info info = ts.get_info(ts.lookup(id.toString()));
					if(info.category() != FUN){
						System.out.println("wrong procedure id ended");
					}
				}else { 
					System.out.println("wrong procedure id ended");
				}
				
				RESULT =new DeclaProcBody(d,s,ts.lookup(id.toString()));
				arq.addConteudo("procbody ::= declarations BEGIN statements END ID -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};
			
formalpars ::= OPAR formalpars_op:f CPAR
			{:
				ts.create_scope();
				RESULT =f;
				ts.remove_scope();
				arq.addConteudo("formalpars ::= OPAR formalpars_op CPAR -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};
			
formalpars_op ::= formalpars_list:f
			{:
				RESULT =f;
				arq.addConteudo("formalpars_op ::= formalpars_list -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			|
			{:
				arq.addConteudo("formalpars_op ::=  -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};
			
formalpars_list ::= formalpars_list:f PONTOVIRGULA fpsection:fp 
			{:
				RESULT =new DeclaDeclaDecla(f,fp);
				arq.addConteudo("formalpars_list ::= formalpars_list PONTOVIRGULA fpsection  -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			| fpsection:fp
			{:
				RESULT =fp;
				arq.addConteudo("formalpars_list ::= fpsection -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};		
			
fpsection ::= fpsection_op idlist:i PONTOPONTO vartype:v 
			{:
		String type= "";
		if(v instanceof DeclaArrayType){
			DeclaArrayType temp = (DeclaArrayType) v;
			type= ((DeclaVartype)temp.getDecla()).getVartype();
		}else {
			type= ((DeclaVartype)v).getVartype();
		}
		int[] values=ts.current_scope().get_values();
		Info infoaux;
		for(int x= 0;x< values.length;x++)
		{
			infoaux=ts.get_info(values[x]);
			if(infoaux.category()==VAR && infoaux.getTypeOld().equals("DEFINIR")){
				infoaux.setTypeOld(type);
				ParamInfo pi = new ParamInfo();
				pi.setDeclared_line(infoaux.getDeclared_line());
				pi.setName(infoaux.getName());
				pi.setScope_level(pi.getScope_level());
				pi.setType(infoaux.getType());
				pi.setTypeOld(type);
				pi.setUsed_lines(infoaux.getUsed_lines());
				if (v instanceof DeclaArrayType) pi.setTypeOld("ARRAY"+type);
				ts.edit_info(values[x], pi);
			}
		}
				RESULT =new DeclaDeclaDecla(i,v);
				arq.addConteudo("fpsection ::= fpsection_op idlist PONTOPONTO vartype -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};

fpsection_op ::= VAR | ;
			
statements ::= statements_list:s
			{:
				RESULT =s;
				arq.addConteudo("statements ::= statements_list -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};
			
statements_list ::= statements_list:s PONTOVIRGULA statement:st
			{:
				RESULT =new DeclaStatements(s,st);
				arq.addConteudo("statements_list ::= statements_list PONTOVIRGULA statement -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			| statement:st
			{:
				RESULT = new DeclaCom(st);
				arq.addConteudo("statements_list ::= statement -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};
			
declarations ::= decl_list:d
			{:
				RESULT = d;
				arq.addConteudo("declarations ::= decl_list -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};
			
decl_list ::=  decl_list:d procdecl:p PONTOVIRGULA 
			{:
				RESULT =new DeclaDeclaDecla(d,p);
				arq.addConteudo("decl_list ::=  decl_list procdecl PONTOVIRGULA  -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			|  const_opt:c var_opt:v
			{:
				RESULT =new DeclaDeclaDecla(c,v);
				arq.addConteudo("decl_list ::= const_opt var_opt -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};
			
const_opt ::= constdecl:c
			{:
				RESULT =c;
				arq.addConteudo("const_opt ::= constdecl -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}	
			|
			{:
				arq.addConteudo("const_opt ::=  -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};	

			
var_opt ::= vardecl:v
			{:
				RESULT =v;
				arq.addConteudo("var_opt ::= vardecl -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			|
			{:
				arq.addConteudo("var_opt ::=  -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};								

expression ::= expression:e OR andexp:a 
			{:
				RESULT =new ExpBinary(e, "OR", a);
				arq.addConteudo("expression ::= expression OR andexp -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			| andexp:a
			{:
				RESULT =a;
				arq.addConteudo("expression ::= andexp -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};
			
andexp ::= andexp:a AND relexp:r 	
			{:
				RESULT =new ExpBinary(a, "AND", r);
				arq.addConteudo("andexp ::= andexp AND relexp -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			| relexp:r
			{:
				RESULT =r;
				arq.addConteudo("andexp ::= relexp -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};		
			
relexp ::= aritexp:a1 RELOP:r aritexp:a2
			{:
				RESULT =new ExpBinary(a1, r.toString(), a2);
				arq.addConteudo("relexp ::= aritexp RELOP aritexp -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			| aritexp:a
			{:
				RESULT =a;
				arq.addConteudo("relexp ::= aritexp -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};	
			
aritexp ::= aritexp:a ADDLOP:l term:t
			{:
				RESULT =new ExpBinary(a, l.toString(), t);
				arq.addConteudo("aritexp ::= aritexp ADDOP term -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			| term:t
			{:
				RESULT =t;
				arq.addConteudo("aritexp ::= term -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};				
			
term ::= term:t MULTOP:m factor:f		
			{:
				RESULT =new ExpBinary(t, m.toString(), f);
				arq.addConteudo("term ::= term MULTOP factor -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			| factor:f
			{:
				RESULT =f;
				arq.addConteudo("term ::= factor -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};	
			
factor ::= ADDLOP:a primary:p
			{:
				RESULT =new ExpFactor(a.toString(), p);
				arq.addConteudo("factor ::= ADDLOP primary -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			| NOT:n primary:p
			{:
				RESULT =new ExpFactor("NOT", p);
				arq.addConteudo("factor ::= NOT primary -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}	
			| primary:p
			{:
				RESULT =p;
				arq.addConteudo("factor ::= primary -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};
			
			
primary ::= OPAR expression:e CPAR
			{:
				RESULT =e;
				arq.addConteudo("primary ::= OPAR expression CPAR -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			| literal:l
			{:
				RESULT =l;
				arq.addConteudo("primary ::= literal -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}	
			| variable:v
			{:
				RESULT =v;
				arq.addConteudo("primary ::= variable -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			| proccall:p
			{:
				RESULT =p;
				arq.addConteudo("primary ::= proccall -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};		
			
proccall ::= ID:id {: 
				
				if(ts.lookup(id.toString()) != 0){
					Info info = ts.get_info(ts.lookup(id.toString()));
					if(info.category() != FUN && info.category() != UNDECL){
						System.out.println("invalid id in expression");
					}
				}else { 
					System.out.println("Procedure not declared");
					UndeclInfo inf= new UndeclInfo();
					inf.setName(id.toString());
					inf.setDeclared_line(CUP$parser$act_num);
					inf.setScope_level(ts.getScopeLevel());
					inf.setTypeOld("DEFINIR");
					ts.insert(id.toString(), inf);
				} :} actualpar:a
			{:
				RESULT =new ExpProcCall(ts.lookup(id.toString()), a);
				arq.addConteudo("proccall ::= ID actualpar -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};
			
actualpar ::= OPAR actualpar_op:a CPAR
			{:
				RESULT =a;
				arq.addConteudo("actualpar ::= OPAR actualpar_op CPAR -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};
			
actualpar_op ::= actualpar_list:a
			{:
				RESULT =a;
				arq.addConteudo("actualpar_op ::= actualpar_list -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			|
			{:
				arq.addConteudo("actualpar_op ::=  -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};
			
actualpar_list ::= actualpar_list:a VIRGULA expression:e 
			{:
				RESULT =new ExpList(a,e);
				arq.addConteudo("actualpar_list ::= actualpar_list VIRGULA expression  -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			| expression:e
			{:
				RESULT = e;
				arq.addConteudo("actualpar_list ::= expression  -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};	
			
variable ::= ID:id
			{:
			
				int idPos = Integer.MAX_VALUE;
				if(ts.lookup(id.toString()) != 0){
					Info info = ts.get_info(ts.lookup(id.toString()));
					if(info.category() != VAR && info.category() != CONST && info.category() != FUN && info.category() != PARAM && info.category() != VAR && info.category()!=UNDECL){
						System.out.println("invalid id in expression");
					}
				}else { 
					System.out.println("Variable not declared: "+id.toString());
					UndeclInfo inf= new UndeclInfo();
					inf.setName(id.toString());
					inf.setDeclared_line(CUP$parser$act_num);
					inf.setScope_level(ts.getScopeLevel());
					inf.setTypeOld("DEFINIR");
					idPos = ts.insert(id.toString(), inf);
				}
				RESULT =new ExpId(ts.lookup(id.toString()));
				arq.addConteudo("variable ::= ID -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			| ID:id OOPAR expression:e OCPAR 
			{:
				int idPos  = Integer.MAX_VALUE;
				if(ts.lookup(id.toString()) != 0){
					Info info = ts.get_info(ts.lookup(id.toString()));
					if(info.category() != PARAM
						&& info.category() != VAR && info.category() != UNDECL){
						System.out.println("invalid id in expression");
					}
				}else { 
					System.out.println("Variable not declared: "+id.toString());
					UndeclInfo inf= new UndeclInfo();
					inf.setName(id.toString());
					inf.setDeclared_line(CUP$parser$act_num);
					inf.setScope_level(ts.getScopeLevel());
					inf.setTypeOld("DEFINIR");
					idPos = ts.insert(id.toString(), inf);
				}
				RESULT =new ExpAtrib(ts.lookup(id.toString()),e);
				arq.addConteudo("ID OOPAR expression OCPAR -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			| ID:id PONTO:p SIZE:s
			{:
				int idPos  = Integer.MAX_VALUE;
				if(ts.lookup(id.toString()) != 0){
					Info info = ts.get_info(ts.lookup(id.toString()));
					if(info.category() != VAR && info.category()!=UNDECL){
						System.out.println("invalid id in expression");
					}
				}else { 
					System.out.println("Variable not declared: "+id.toString());
				UndeclInfo inf= new UndeclInfo();
				inf.setName(id.toString());
				inf.setDeclared_line(CUP$parser$act_num);
				inf.setScope_level(ts.getScopeLevel());
				inf.setTypeOld("DEFINIR");
				idPos = ts.insert(id.toString(), inf);
				}
				RESULT =new ExpIdSize(ts.lookup(id.toString()),"SIZE");
				arq.addConteudo("variable ::= ID PONTO SIZE -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};	
			
statement ::= assignment:a
			{:
				RESULT =a; 
				arq.addConteudo("statement ::= assignment -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			| conditional:a
			{:
				RESULT =a;
				arq.addConteudo("statement ::= conditional -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			| repetition:a
			{:
				RESULT =a;
				arq.addConteudo("statement ::= repetition -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			| proccall:a	
			{:
				RESULT = new ComExp(a);
				arq.addConteudo("statement ::= proccall -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			| io_statement:a			
			{:
				RESULT =a;
				arq.addConteudo("statement ::= io_statement -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};		
			
assignment ::= variable:v ATRI expression:e	
			{:
				RESULT =new ComAssignment(v,e);
				arq.addConteudo("assignment ::= variable ATRI expression	 -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};
			
conditional ::= conditional_list:cl conditional_op:co END
			{:
				RESULT =new ComConditional(cl,co);
				arq.addConteudo("conditional ::= conditional_list conditional_op END -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			|
			{:
				arq.addConteudo("conditional ::=  -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};
			
conditional_list ::= conditional_list:cl ELSIF:el expression:e THEN:t statements:s
			{:
				RESULT =new ComConditional(cl,new  ComExpDecla(e,s,0));
				arq.addConteudo("conditional_list ::= conditional_list ELSIF expression THEN statements -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			|IF:i expression:e THEN:t statements:s 			
			{:
				RESULT = new  ComExpDecla(e,s,1);
				arq.addConteudo("conditional_list ::= IF expression THEN statements -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};
			
conditional_op ::= ELSE:e statements:s
			{:
				RESULT = new ComElse(s);
				arq.addConteudo("onditional_op ::= ELSE statements -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			|
			{:
				arq.addConteudo("conditional_op ::=  -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};

repetition ::= WHILE:w expression:e DO:d statements:s END 
			{:
				RESULT = new  ComExpDecla(e,s,2);
				arq.addConteudo("repetition ::= WHILE expression DO statements END  -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			| REPEAT:r statement:s UNTIL:u expression:e 	
			{:
				RESULT =new ComRepeat(s,e);
				arq.addConteudo("repetition ::= REPEAT statement UNTIL expression -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};									
			
io_statement ::= WRITE:w OPAR expression:e CPAR
			{:
				RESULT =new ComExp(e);
				arq.addConteudo("io_statement ::=  WRITE OPAR expression CPAR -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			| WRITELN 	
			{:
				//RESULT =new ComIo(2,null);
				arq.addConteudo("io_statement ::=  WRITELN -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}	
			| WRITELN OPAR expression:e CPAR
			{:
				RESULT =new ComExp(e);
				arq.addConteudo("io_statement ::=  WRITELN OPAR expression CPAR -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:}
			| READ OPAR expression:e CPAR
			{:
				RESULT =new ComExp(e);
				arq.addConteudo("io_statement ::=  READ OPAR expression CPAR -- Linha do lookahead:"+CUP$parser$act_num+"\n");
			:};	
			
literal ::= NUMBER:n {: 
				RESULT =new ExpValor(Integer.valueOf(n.toString()));
			arq.addConteudo("literal ::=  NUMBER -- Linha do lookahead:"+CUP$parser$act_num+"\n"); 
			:}
			| TRUE:t {: 
				RESULT =new ExpBoolean(true);
			arq.addConteudo("literal ::=  TRUE -- Linha do lookahead:"+CUP$parser$act_num+"\n"); 
			:}
			| FALSE:f {: 
				RESULT =new ExpBoolean(false);
			arq.addConteudo("literal ::= FALSE -- Linha do lookahead:"+CUP$parser$act_num+"\n"); 
			:}; 											 													