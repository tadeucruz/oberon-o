/*
 * Generated by classgen, version 1.3
 * 24/09/10 22:45
 */
package controle;

import type.Type;

public abstract class Com {

	public static Type INT = Decla.INT;
	public static Type BOOL = Decla.BOOL;
	public static Type VOID = Decla.VOID;
	public static Type ERROR = Decla.ERROR;
	public static Type INTARRAY = Decla.INTARRAY;
	public static Type BOOLARRAY = Decla.BOOLARRAY;
	public static int label_count;
	public int width;
	public int offset;
	public String next = "FALL";

	public int new_label() {
		return ++label_count;
	}

	public Exp getExp() {
		throw new ClassCastException("tried to call abstract method");
	}

	public void setExp(Exp exp) {
		throw new ClassCastException("tried to call abstract method");
	}

	public Exp getExp2() {
		throw new ClassCastException("tried to call abstract method");
	}

	public void setExp2(Exp exp2) {
		throw new ClassCastException("tried to call abstract method");
	}

	public Decla getDecla() {
		throw new ClassCastException("tried to call abstract method");
	}

	public void setDecla(Decla decla) {
		throw new ClassCastException("tried to call abstract method");
	}

	public int getControl() {
		throw new ClassCastException("tried to call abstract method");
	}

	public void setControl(int control) {
		throw new ClassCastException("tried to call abstract method");
	}

	public Com getCom() {
		throw new ClassCastException("tried to call abstract method");
	}

	public void setCom(Com com) {
		throw new ClassCastException("tried to call abstract method");
	}

	public Com getCom2() {
		throw new ClassCastException("tried to call abstract method");
	}

	public void setCom2(Com com2) {
		throw new ClassCastException("tried to call abstract method");
	}

	public String toString() {
		return toString("");
	}

	public abstract String toString(String tab);

	public abstract void type_check();

	public boolean compatible(Type t1, Type t2) {
		return t1 == t2;
	}

	public void gen() {
		System.out.println("Implementar: " + this.getClass());
	}

}
