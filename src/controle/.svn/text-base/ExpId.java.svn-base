/*
 * Generated by classgen, version 1.3
 * 24/09/10 22:45
 */
package controle;

import principal.goo;
import type.Type;
import SymbolTable.ConstInfo;
import SymbolTable.Info;
import SymbolTable.SymbolTable;

public class ExpId extends Exp {

	private int id;

	public ExpId(int id) {
		this.id = id;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String toString(String tab) {
		StringBuffer buffer = new StringBuffer();
		buffer.append(tab);
		buffer.append("ExpId(\n");
		buffer.append("  " + tab + id);
		buffer.append("\n");
		buffer.append(tab);
		buffer.append(") [ExpId]");
		return buffer.toString();
	}

	@Override
	public StringBuffer to_postfix() {
		StringBuffer _code = new StringBuffer();
		_code.append(id);
		return _code;
	}

	@Override
	public boolean check_const() {
		SymbolTable ts = new SymbolTable();
		Info i = ts.get_info(id);
		if (i.category() == 2) {
			ConstInfo ci = (ConstInfo) i;
			cvalue = ci.getConst_value();
			return true;
		} else {
			return false;
		}
	}

	@Override
	public Type type_check() {
		_type = ERROR;
		SymbolTable ts = new SymbolTable();
		Info info = ts.get_info(id);
		if (id != Integer.MAX_VALUE) {
			_type = info.getType();
		} else {
			System.err.println("Arrumar ID de MAX_VALUE");
			goo.podeContinuar = false;
			_type = ERROR;
		}
		return _type;
	}

	@Override
	public void gen() {
		this.addr = "id" + id;
	}

	public boolean equals(Object obj) {
		return this.toString().equals(obj.toString());
	}

}
