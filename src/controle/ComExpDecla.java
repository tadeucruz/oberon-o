/*
 * Generated by classgen, version 1.3
 * 24/09/10 22:45
 */
package controle;

import principal.goo;
import type.Type;

public class ComExpDecla extends Com {

	private Exp exp;
	private Decla decla;
	private int control;

	public ComExpDecla(Exp exp, Decla decla, int control) {
		this.exp = exp;
		this.decla = decla;
		this.control = control;
	}

	public Exp getExp() {
		return exp;
	}

	public void setExp(Exp exp) {
		this.exp = exp;
	}

	public Decla getDecla() {
		return decla;
	}

	public void setDecla(Decla decla) {
		this.decla = decla;
	}

	public int getControl() {
		return control;
	}

	public void setControl(int control) {
		this.control = control;
	}

	public String toString(String tab) {
		StringBuffer buffer = new StringBuffer();
		buffer.append(tab);
		buffer.append("ComExpDecla(\n");
		if (exp != null)
			buffer.append(exp.toString("  " + tab));
		else
			buffer.append(tab + "  null");
		buffer.append("\n");
		if (decla != null)
			buffer.append(decla.toString("  " + tab));
		else
			buffer.append(tab + "  null");
		buffer.append("\n");
		buffer.append("  " + tab + control);
		buffer.append("\n");
		buffer.append(tab);
		buffer.append(") [ComExpDecla]");
		return buffer.toString();
	}

	@Override
	public void type_check() {
		if (control == 1) { // IF
			Type t = exp.type_check();
			if (t == ERROR) {
				System.out.println("invalid type in condition");
				goo.podeContinuar = false;
			}
			decla.type_check();
		} else if (control == 2) { // WHILE
			Type t = exp.type_check();
			if (t == ERROR) {
				System.out.println("invalid type in condition");
				goo.podeContinuar = false;
			}
			decla.type_check();
		} else { // ELSE
			decla.type_check();
		}
	}

	@Override
	public void gen() {
		if (control == 1) {// IF
			exp.t_label = "FALL";
			if (Quad.pending() == null) {
				exp.f_label = "F" + new_label();
				Quad.use_label(exp.f_label);
			} else {
				exp.f_label = Quad.pending();
			}
			String l;

			if (this.next.equals("FALL")) {
				l = "F" + new_label();
			} else {
				l = this.next;
			}

			this.next = decla.next = l;
			exp.gen();
			decla.gen();
		} else if (control == 2) { // while
			exp.t_label = "FALL";
			exp.f_label = (this.next.equals("FALL")) ? "F" + new_label()
					: this.next;
			if (Quad.pending() == null) {
				decla.next = "F" + new_label();
				Quad.use_label(decla.next);
			} else {
				decla.next = Quad.pending();
			}
			new Quad("goto", decla.next, "", "");

			if (this.next.equals("FALL")) {
				Quad.use_label(exp.f_label);
			}
			decla.gen();
			Quad.use_label(decla.next);
			exp.IfouWhile = 1;
			exp.gen();
			exp.IfouWhile = 0;
			Quad.pen = null;
		}

	}

}
