/*
 * Generated by classgen, version 1.3
 * 24/09/10 22:45
 */
package controle;

import principal.goo;
import type.Type;
import SymbolTable.ConstInfo;
import SymbolTable.SymbolTable;

public class DeclaConst extends Decla {

	private int id;
	private Exp exp;

	public DeclaConst(int id, Exp exp) {
		this.id = id;
		this.exp = exp;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public Exp getExp() {
		return exp;
	}

	public void setExp(Exp exp) {
		this.exp = exp;
	}

	public String toString(String tab) {
		StringBuffer buffer = new StringBuffer();
		buffer.append(tab);
		buffer.append("DeclaConst(\n");
		buffer.append("  " + tab + id);
		buffer.append("\n");
		if (exp != null)
			buffer.append(exp.toString("  " + tab));
		else
			buffer.append(tab + "  null");
		buffer.append("\n");
		buffer.append(tab);
		buffer.append(") [DeclaConst]");
		return buffer.toString();
	}

	@Override
	protected void check_const() {
		SymbolTable ts = new SymbolTable();
		ConstInfo ci = (ConstInfo) ts.get_info(id);
		int cvalue;
		if (exp.check_const()) {
			cvalue = exp.cvalue;
			ci.setConst_value(cvalue);
		} else {
			System.out.println("constant expression expected");
			goo.podeContinuar = false;
		}
	}

	@Override
	public void type_check() {
		SymbolTable ts = new SymbolTable();
		ConstInfo ci = (ConstInfo) ts.get_info(id);
		Type type = exp.type_check();
		if (type != ERROR) {
			int cvalue;
			if (exp.check_const()) {
				ci.setConst_value(exp.cvalue);
				ci.setType(type);
				ts.edit_info(id, ci);
			} else {
				System.err.println("constant expression expected");
				goo.podeContinuar = false;
			}
		}
		exp.type_check();
	}

	@Override
	public void gen() {
		exp.gen();
	}

}