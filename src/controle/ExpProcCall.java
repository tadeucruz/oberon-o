/*
 * Generated by classgen, version 1.3
 * 24/09/10 22:45
 */
package controle;

import java.util.ArrayList;

import principal.goo;
import type.Type;
import SymbolTable.ParamInfo;
import SymbolTable.SymbolTable;

public class ExpProcCall extends Exp {

	private int id;
	private Exp exp;

	public ExpProcCall(int id, Exp exp) {
		this.id = id;
		this.exp = exp;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public Exp getExp() {
		return exp;
	}

	public void setExp(Exp exp) {
		this.exp = exp;
	}

	public String toString(String tab) {
		StringBuffer buffer = new StringBuffer();
		buffer.append(tab);
		buffer.append("ExpProcCall(\n");
		buffer.append("  " + tab + id);
		buffer.append("\n");
		if (exp != null)
			buffer.append(exp.toString("  " + tab));
		else
			buffer.append(tab + "  null");
		buffer.append("\n");
		buffer.append(tab);
		buffer.append(") [ExpProcCall]");
		return buffer.toString();
	}

	@Override
	public StringBuffer to_postfix() {
		StringBuffer volta = new StringBuffer();
		volta.append(exp.to_postfix());
		return null;
	}

	@Override
	public Type type_check() {
		if (exp instanceof ExpId) {
			SymbolTable ts = new SymbolTable();
			Type volta = ts.get_info(id).getType();
			int controle = id + 1;
			exp.type_check();
			while (ts.get_info(controle) instanceof ParamInfo) {
				if (ts.get_info(controle).getType() != exp.type()) {
					System.out.println("Invalid paramentro func");
					goo.podeContinuar = false;
				}
				controle = controle + 1;
			}
			return volta;
		} else if (exp instanceof ExpIdSize) {
			SymbolTable ts = new SymbolTable();
			Type volta = ts.get_info(id).getType();
			int controle = id + 1;
			exp.type_check();
			while (ts.get_info(controle) instanceof ParamInfo) {
				if (ts.get_info(controle).getType() != exp.type()) {
					System.out.println("Invalid paramentro func");
					goo.podeContinuar = false;
				}
				controle = controle + 1;
			}
			return volta;
		} else {
			SymbolTable ts = new SymbolTable();
			Type volta = ts.get_info(id).getType();
			int controle = id + 1;
			int cont = 0;
			if (exp != null) {
				exp.type_check();
				ArrayList<Type> temp = ((ExpList) exp).getControle();
				while (ts.get_info(controle) instanceof ParamInfo) {
					if (temp.get(cont) != ts.get_info(controle).getType()) {
						System.out.println("Invalid paramentro func: "
								+ temp.get(cont) + " waiting: "
								+ ts.get_info(controle).getType());
						goo.podeContinuar = false;
					}
					controle = controle + 1;
					cont = cont + 1;
				}
			}
			return volta;
		}
	}

	public boolean equals(Object obj) {
		return this.toString().equals(obj.toString());
	}
}
