/*
 * Generated by classgen, version 1.3
 * 24/09/10 22:45
 */
package controle;

import SymbolTable.Info;
import SymbolTable.SymbolTable;

public class DeclaId extends Decla {

	private int id;

	public DeclaId(int id) {
		this.id = id;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String toString(String tab) {
		StringBuffer buffer = new StringBuffer();
		buffer.append(tab);
		buffer.append("DeclaId(\n");
		buffer.append("  " + tab + id);
		buffer.append("\n");
		buffer.append(tab);
		buffer.append(") [DeclaId]");
		return buffer.toString();
	}

	@Override
	public void type_check() {
		// MUDEI
		SymbolTable ts = new SymbolTable();
		Info vi = ts.get_info(id);
		if (vi.getTypeOld().equals("INTEGER")) {
			vi.setType(INT);
			ts.edit_info(id, vi);
		} else if (vi.getTypeOld().equals("BOOLEAN")) {
			vi.setType(BOOL);
			ts.edit_info(id, vi);
		} else if (vi.getTypeOld().equals("ARRAYINTEGER")) {
			vi.setType(INTARRAY);
			vi.setTypeOld("ARRAY");
			ts.edit_info(id, vi);
		} else if (vi.getTypeOld().equals("ARRAYBOOLEAN")) {
			vi.setType(BOOLARRAY);
			vi.setTypeOld("ARRAY");
			ts.edit_info(id, vi);
		} else {
			vi.setType(ERROR);
			ts.edit_info(id, vi);
		}
	}

	@Override
	public void gen() {
		SymbolTable ts = new SymbolTable();
		Info vi = ts.get_info(id);
		int temp = contDesloca++ * 4;
		vi.setOffsets(temp);
		new Quad(globalOuLocal, "id" + id, "" + temp, "");
		this.width = 4;
		ControleDead e = new ControleDead();
		e.setVar("id" + id);
		e.setInfo("-1");
		Quad.dead.add(e);
		Variaveis v = new Variaveis();
		v.setV("id" + id);
		Quad.DV.add(v);
	}

}
