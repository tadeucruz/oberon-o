/*
 * Generated by classgen, version 1.3
 * 24/09/10 22:45
 */
package controle;

import type.Type;

public class DeclaDeclaDecla extends Decla {

	private Decla left;
	private Decla right;

	public DeclaDeclaDecla(Decla left, Decla right) {
		this.left = left;
		this.right = right;
	}

	public Decla getLeft() {
		return left;
	}

	public void setLeft(Decla left) {
		this.left = left;
	}

	public Decla getRight() {
		return right;
	}

	public void setRight(Decla right) {
		this.right = right;
	}

	public String toString(String tab) {
		StringBuffer buffer = new StringBuffer();
		buffer.append(tab);
		buffer.append("DeclaDeclaDecla(\n");
		if (left != null)
			buffer.append(left.toString("  " + tab));
		else
			buffer.append(tab + "  null");
		buffer.append("\n");
		if (right != null)
			buffer.append(right.toString("  " + tab));
		else
			buffer.append(tab + "  null");
		buffer.append("\n");
		buffer.append(tab);
		buffer.append(") [DeclaDeclaDecla]");
		return buffer.toString();
	}

	@Override
	public void type_check() {
		Type typeL = VOID;
		Type typeR = VOID;
		if (left != null) {
			left.type_check();
			typeL = left.type;
		}
		if (right != null) {
			right.type_check();
			typeR = right.type;
		}
	}

	@Override
	public void gen() {
		int wl = 0, wr = 0;
		if (left != null) {
			left.gen();
			wl = left.width;
		}
		if (right != null) {
			right.gen();
			wr = right.width;
		}
		this.width = wl + wr;
	}

}
