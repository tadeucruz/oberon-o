/*
 * Generated by classgen, version 1.3
 * 24/09/10 22:45
 */
package controle;

import principal.goo;
import type.ArrayType;
import type.Type;

public class ExpBinary extends Exp {

	private Exp exp;
	private String op;
	private Exp exp2;

	public ExpBinary(Exp exp, String tipo, Exp exp2) {
		this.exp = exp;
		this.op = tipo;
		this.exp2 = exp2;
	}

	public Exp getExp() {
		return exp;
	}

	public void setExp(Exp exp) {
		this.exp = exp;
	}

	public String getTipo() {
		return op;
	}

	public void setTipo(String tipo) {
		this.op = tipo;
	}

	public Exp getExp2() {
		return exp2;
	}

	public void setExp2(Exp exp2) {
		this.exp2 = exp2;
	}

	public String toString(String tab) {
		StringBuffer buffer = new StringBuffer();
		buffer.append(tab);
		buffer.append("ExpBinary(\n");
		if (exp != null)
			buffer.append(exp.toString("  " + tab));
		else
			buffer.append(tab + "  null");
		buffer.append("\n");
		buffer.append("  " + tab + op);
		buffer.append("\n");
		if (exp2 != null)
			buffer.append(exp2.toString("  " + tab));
		else
			buffer.append(tab + "  null");
		buffer.append("\n");
		buffer.append(tab);
		buffer.append(") [ExpBinary]");
		return buffer.toString();
	}

	@Override
	public boolean check_const() {
		int v1, v2;
		if (exp.check_const() && exp2.check_const()) {
			v1 = exp.cvalue;
			v2 = exp2.cvalue;
			cvalue = calc(op, v1, v2);
			return true;
		} else {
			return false;
		}
	}

	@Override
	public StringBuffer to_postfix() {
		StringBuffer ret = new StringBuffer();
		ret.append(exp.to_postfix());
		ret.append(op);
		ret.append(exp2.to_postfix());
		return ret;
	}

	@Override
	public Type type_check() {

		Type t1 = exp.type_check();
		Type t2 = exp2.type_check();
		_type = ERROR;
		if (t1 instanceof ArrayType) {
			t1 = ((ArrayType) t1).getType();
		}
		if (t2 instanceof ArrayType) {
			t2 = ((ArrayType) t2).getType();
		}
		if (t1 != ERROR && t2 != ERROR) {
			if ((op.equals("+") || op.equals("-") || op.equals("*")
					|| op.equals("/") || op.equals("mod"))
					&& (t1 == INT) && (t2 == INT)) {
				return _type = INT;
			} else if ((op.equals("=") || op.equals("<") || op.equals(">")
					|| op.equals("#") || op.equals("<=") || op.equals(">="))
					&& t1 == INT && t2 == INT) {
				return _type = BOOL;
			} else if ((op.equals("AND") || op.equals("OR")) && t1 == BOOL
					&& t2 == BOOL) {
				return _type = BOOL;
			}
		} else {
			System.out.println("invalid type in binary expression");
			goo.podeContinuar = false;
		}

		return _type;

	}

	@Override
	public void gen() {

		if (op.equals("AND")) {
			exp.t_label = "FALL";
			exp.f_label = (this.f_label.equals("FALL")) ? "F" + new_label()
					: this.f_label;
			exp2.t_label = this.t_label;
			exp2.f_label = this.f_label;
			if (this.f_label.equals("FALL")) {
				Quad.use_label(exp.f_label);
			}
		}
		if (op.equals("OR")) {
			exp.t_label = (this.t_label.equals("FALL")) ? "T" + new_label()
					: exp.t_label;
			exp.f_label = "FALL";
			exp2.t_label = this.t_label;
			exp2.f_label = this.f_label;
			if (this.t_label.equals("FALL")) {
				Quad.use_label(exp.f_label);
			}
		}
		if (!this.t_label.equals("FALL") && !this.f_label.equals("FALL")) {
			exp.gen();
			exp2.gen();
			new Quad(op, exp.addr, exp2.addr, this.t_label);
			new Quad("goto", this.f_label, "", "");
		} else if (!this.t_label.equals("FALL")) {
			exp.gen();
			exp2.gen();
			new Quad(op, exp.addr, exp2.addr, this.t_label);
		} else if (!this.f_label.equals("FALL")) {
			exp.gen();
			exp2.gen();
			if (this.IfouWhile == 1) {
				if (op.equals("<"))
					op = ">=";
				else if (op.equals(">"))
					op = "<=";
			}
			new Quad(op, exp.addr, exp2.addr, this.f_label);
		} else {
			exp.gen();
			exp2.gen();
			Temporarios tmp = new Temporarios();
			this.addr = "T" + tmp.getNumeroTemp();
			Variaveis v = new Variaveis();
			v.setV(this.addr);
			Quad.DV.add(v);
			new Quad(op, exp.addr, exp2.addr, "T" + tmp.getNumeroTemp());
		}
	}

	public boolean equals(Object obj) {
		return this.toString().equals(obj.toString());
	}

}
