//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 14 16:08:20 BRT 2010
//----------------------------------------------------

package laxer;

import io.arquivos;
import java_cup.runtime.Symbol;
import principal.goo;
import type.Type;
import SymbolTable.ConstInfo;
import SymbolTable.FunInfo;
import SymbolTable.Info;
import SymbolTable.ModuleInfo;
import SymbolTable.ParamInfo;
import SymbolTable.SymbolTable;
import SymbolTable.UndeclInfo;
import SymbolTable.VarInfo;
import controle.Com;
import controle.ComAssignment;
import controle.ComConditional;
import controle.ComElse;
import controle.ComExp;
import controle.ComExpDecla;
import controle.ComRepeat;
import controle.Decla;
import controle.DeclaArrayType;
import controle.DeclaCom;
import controle.DeclaConst;
import controle.DeclaDeclaDecla;
import controle.DeclaId;
import controle.DeclaIdList;
import controle.DeclaProcBody;
import controle.DeclaProcHeader;
import controle.DeclaStatements;
import controle.DeclaVartype;
import controle.Exp;
import controle.ExpAtrib;
import controle.ExpBinary;
import controle.ExpBoolean;
import controle.ExpFactor;
import controle.ExpId;
import controle.ExpIdSize;
import controle.ExpList;
import controle.ExpProcCall;
import controle.ExpValor;
import controle.Module;

/**
 * CUP v0.11a beta 20060608 generated parser.
 * 
 * @version Thu Oct 14 16:08:20 BRT 2010
 */
public class parser extends java_cup.runtime.lr_parser {

	/** Default constructor. */
	public parser() {
		super();
	}

	/** Constructor which sets the default scanner. */
	public parser(java_cup.runtime.Scanner s) {
		super(s);
	}

	/** Constructor which sets the default scanner. */
	public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
		super(s, sf);
	}

	/** Production table. */
	protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\133\000\002\002\004\000\002\056\002\000\002\002"
			+ "\014\000\002\057\002\000\002\017\010\000\002\017\003"
			+ "\000\002\023\007\000\002\023\003\000\002\005\005\000"
			+ "\002\005\003\000\002\003\003\000\002\003\003\000\002"
			+ "\030\003\000\002\030\003\000\002\004\006\000\002\046"
			+ "\003\000\002\046\002\000\002\006\005\000\002\007\003"
			+ "\000\002\007\002\000\002\060\002\000\002\010\007\000"
			+ "\002\011\004\000\002\011\002\000\002\012\007\000\002"
			+ "\013\005\000\002\014\003\000\002\014\002\000\002\015"
			+ "\005\000\002\015\003\000\002\016\006\000\002\020\003"
			+ "\000\002\020\002\000\002\021\003\000\002\022\005\000"
			+ "\002\022\003\000\002\024\003\000\002\025\005\000\002"
			+ "\025\004\000\002\026\003\000\002\026\002\000\002\027"
			+ "\003\000\002\027\002\000\002\031\005\000\002\031\003"
			+ "\000\002\032\005\000\002\032\003\000\002\033\005\000"
			+ "\002\033\003\000\002\034\005\000\002\034\003\000\002"
			+ "\035\005\000\002\035\003\000\002\036\004\000\002\036"
			+ "\004\000\002\036\003\000\002\037\005\000\002\037\003"
			+ "\000\002\037\003\000\002\037\003\000\002\061\002\000"
			+ "\002\041\005\000\002\043\005\000\002\044\003\000\002"
			+ "\044\002\000\002\045\005\000\002\045\003\000\002\042"
			+ "\003\000\002\042\006\000\002\042\005\000\002\047\003"
			+ "\000\002\047\003\000\002\047\003\000\002\047\003\000"
			+ "\002\047\003\000\002\050\005\000\002\051\005\000\002"
			+ "\051\002\000\002\052\007\000\002\052\006\000\002\053"
			+ "\004\000\002\053\002\000\002\054\007\000\002\054\006"
			+ "\000\002\055\006\000\002\055\003\000\002\055\006\000"
			+ "\002\055\006\000\002\040\003\000\002\040\003\000\002"
			+ "\040\003" });

	/** Access to production table. */
	public short[][] production_table() {
		return _production_table;
	}

	/** Parse-action table. */
	protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\241\000\004\011\004\001\002\000\004\035\007\001"
			+ "\002\000\004\002\006\001\002\000\004\002\001\001\002"
			+ "\000\004\043\010\001\002\000\012\005\000\006\000\007"
			+ "\000\034\000\001\002\000\012\005\uffd9\006\uffd9\007\uffd9"
			+ "\034\012\001\002\000\012\005\ufffc\006\ufffc\007\ufffc\035"
			+ "\ufffc\001\002\000\012\005\uffda\006\uffda\007\uffda\035\237"
			+ "\001\002\000\004\007\232\001\002\000\006\006\116\007"
			+ "\uffdd\001\002\000\010\005\017\006\uffd7\007\uffd7\001\002"
			+ "\000\010\006\ufffa\007\ufffa\035\ufffa\001\002\000\010\006"
			+ "\uffd8\007\uffd8\035\022\001\002\000\006\006\uffdb\007\uffdb"
			+ "\001\002\000\006\044\ufff8\050\ufff8\001\002\000\006\044"
			+ "\025\050\024\001\002\000\010\012\030\013\033\030\034"
			+ "\001\002\000\004\035\026\001\002\000\006\044\ufff9\050"
			+ "\ufff9\001\002\000\006\040\ufff7\043\ufff7\001\002\000\006"
			+ "\040\ufff4\043\ufff4\001\002\000\006\040\ufff6\043\ufff6\001"
			+ "\002\000\004\043\115\001\002\000\006\040\ufff5\043\ufff5"
			+ "\001\002\000\022\026\037\031\ufff1\035\041\036\044\037"
			+ "\042\053\046\055\040\056\050\001\002\000\040\010\uffd1"
			+ "\015\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\031"
			+ "\uffd1\040\uffd1\042\uffd1\043\uffd1\044\uffd1\051\112\053\111"
			+ "\054\uffd1\001\002\000\042\010\uffc6\015\uffc6\021\uffc6\022"
			+ "\uffc6\023\uffc6\024\uffc6\025\uffc6\031\uffc6\040\uffc6\042\uffc6"
			+ "\043\uffc6\044\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\001"
			+ "\002\000\014\035\041\036\044\037\042\055\040\056\050"
			+ "\001\002\000\042\010\uffa8\015\uffa8\021\uffa8\022\uffa8\023"
			+ "\uffa8\024\uffa8\025\uffa8\031\uffa8\040\uffa8\042\uffa8\043\uffa8"
			+ "\044\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\001\002\000"
			+ "\052\010\uffbe\015\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe"
			+ "\025\uffbe\031\uffbe\037\uffc5\040\uffbe\041\074\042\uffbe\043"
			+ "\uffbe\044\uffbe\045\073\047\uffbe\051\uffbe\052\uffbe\053\uffbe"
			+ "\054\uffbe\001\002\000\020\026\037\035\041\036\044\037"
			+ "\042\053\046\055\040\056\050\001\002\000\006\025\066"
			+ "\031\ufff2\001\002\000\042\010\uffa9\015\uffa9\021\uffa9\022"
			+ "\uffa9\023\uffa9\024\uffa9\025\uffa9\031\uffa9\040\uffa9\042\uffa9"
			+ "\043\uffa9\044\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\001"
			+ "\002\000\042\010\uffcd\015\uffcd\021\uffcd\022\uffcd\023\uffcd"
			+ "\024\uffcd\025\uffcd\031\uffcd\040\uffcd\042\uffcd\043\uffcd\044"
			+ "\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\001\002\000\014"
			+ "\035\041\036\044\037\042\055\040\056\050\001\002\000"
			+ "\042\010\uffcf\015\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf"
			+ "\025\uffcf\031\uffcf\040\uffcf\042\uffcf\043\uffcf\044\uffcf\051"
			+ "\uffcf\052\063\053\uffcf\054\uffcf\001\002\000\042\010\uffa7"
			+ "\015\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\031"
			+ "\uffa7\040\uffa7\042\uffa7\043\uffa7\044\uffa7\051\uffa7\052\uffa7"
			+ "\053\uffa7\054\uffa7\001\002\000\042\010\uffca\015\uffca\021"
			+ "\uffca\022\uffca\023\uffca\024\uffca\025\uffca\031\uffca\040\uffca"
			+ "\042\uffca\043\uffca\044\uffca\051\uffca\052\uffca\053\uffca\054"
			+ "\uffca\001\002\000\042\010\uffc7\015\uffc7\021\uffc7\022\uffc7"
			+ "\023\uffc7\024\uffc7\025\uffc7\031\uffc7\040\uffc7\042\uffc7\043"
			+ "\uffc7\044\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\001\002"
			+ "\000\034\010\uffd3\015\uffd3\021\uffd3\022\uffd3\023\uffd3\024"
			+ "\uffd3\025\uffd3\031\uffd3\040\uffd3\042\uffd3\043\uffd3\044\uffd3"
			+ "\054\uffd3\001\002\000\004\031\061\001\002\000\042\010"
			+ "\uffc8\015\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8"
			+ "\031\uffc8\040\uffc8\042\uffc8\043\uffc8\044\uffc8\051\uffc8\052"
			+ "\uffc8\053\uffc8\054\uffc8\001\002\000\034\010\uffd5\015\uffd5"
			+ "\021\uffd5\022\uffd5\023\uffd5\024\057\025\uffd5\031\uffd5\040"
			+ "\uffd5\042\uffd5\043\uffd5\044\uffd5\054\uffd5\001\002\000\020"
			+ "\026\037\035\041\036\044\037\042\053\046\055\040\056"
			+ "\050\001\002\000\034\010\uffd4\015\uffd4\021\uffd4\022\uffd4"
			+ "\023\uffd4\024\uffd4\025\uffd4\031\uffd4\040\uffd4\042\uffd4\043"
			+ "\uffd4\044\uffd4\054\uffd4\001\002\000\006\012\030\013\033"
			+ "\001\002\000\006\040\ufff3\043\ufff3\001\002\000\020\026"
			+ "\037\035\041\036\044\037\042\053\046\055\040\056\050"
			+ "\001\002\000\042\010\uffce\015\uffce\021\uffce\022\uffce\023"
			+ "\uffce\024\uffce\025\uffce\031\uffce\040\uffce\042\uffce\043\uffce"
			+ "\044\uffce\051\uffce\052\uffce\053\uffce\054\uffce\001\002\000"
			+ "\042\010\uffcc\015\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc"
			+ "\025\uffcc\031\uffcc\040\uffcc\042\uffcc\043\uffcc\044\uffcc\051"
			+ "\uffcc\052\uffcc\053\uffcc\054\uffcc\001\002\000\020\026\037"
			+ "\035\041\036\044\037\042\053\046\055\040\056\050\001"
			+ "\002\000\034\010\uffd6\015\uffd6\021\uffd6\022\uffd6\023\uffd6"
			+ "\024\057\025\uffd6\031\uffd6\040\uffd6\042\uffd6\043\uffd6\044"
			+ "\uffd6\054\uffd6\001\002\000\006\025\066\040\071\001\002"
			+ "\000\042\010\uffc9\015\uffc9\021\uffc9\022\uffc9\023\uffc9\024"
			+ "\uffc9\025\uffc9\031\uffc9\040\uffc9\042\uffc9\043\uffc9\044\uffc9"
			+ "\051\uffc9\052\uffc9\053\uffc9\054\uffc9\001\002\000\004\037"
			+ "\100\001\002\000\004\033\077\001\002\000\020\026\037"
			+ "\035\041\036\044\037\042\053\046\055\040\056\050\001"
			+ "\002\000\006\025\066\042\076\001\002\000\044\010\uffbd"
			+ "\015\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\031"
			+ "\uffbd\040\uffbd\042\uffbd\043\uffbd\044\uffbd\047\uffbd\051\uffbd"
			+ "\052\uffbd\053\uffbd\054\uffbd\001\002\000\044\010\uffbc\015"
			+ "\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\031\uffbc"
			+ "\040\uffbc\042\uffbc\043\uffbc\044\uffbc\047\uffbc\051\uffbc\052"
			+ "\uffbc\053\uffbc\054\uffbc\001\002\000\022\026\037\035\041"
			+ "\036\044\037\042\040\uffc1\053\046\055\040\056\050\001"
			+ "\002\000\042\010\uffc4\015\uffc4\021\uffc4\022\uffc4\023\uffc4"
			+ "\024\uffc4\025\uffc4\031\uffc4\040\uffc4\042\uffc4\043\uffc4\044"
			+ "\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\001\002\000\004"
			+ "\040\107\001\002\000\006\040\uffc2\044\105\001\002\000"
			+ "\010\025\066\040\uffbf\044\uffbf\001\002\000\020\026\037"
			+ "\035\041\036\044\037\042\053\046\055\040\056\050\001"
			+ "\002\000\010\025\066\040\uffc0\044\uffc0\001\002\000\042"
			+ "\010\uffc3\015\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025"
			+ "\uffc3\031\uffc3\040\uffc3\042\uffc3\043\uffc3\044\uffc3\051\uffc3"
			+ "\052\uffc3\053\uffc3\054\uffc3\001\002\000\042\010\uffcb\015"
			+ "\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\031\uffcb"
			+ "\040\uffcb\042\uffcb\043\uffcb\044\uffcb\051\uffcb\052\uffcb\053"
			+ "\uffcb\054\uffcb\001\002\000\020\026\037\035\041\036\044"
			+ "\037\042\053\046\055\040\056\050\001\002\000\020\026"
			+ "\037\035\041\036\044\037\042\053\046\055\040\056\050"
			+ "\001\002\000\036\010\uffd2\015\uffd2\021\uffd2\022\uffd2\023"
			+ "\uffd2\024\uffd2\025\uffd2\031\uffd2\040\uffd2\042\uffd2\043\uffd2"
			+ "\044\uffd2\053\111\054\uffd2\001\002\000\042\010\uffd0\015"
			+ "\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\031\uffd0"
			+ "\040\uffd0\042\uffd0\043\uffd0\044\uffd0\051\uffd0\052\063\053"
			+ "\uffd0\054\uffd0\001\002\000\010\006\ufffb\007\ufffb\035\ufffb"
			+ "\001\002\000\004\035\210\001\002\000\004\043\207\001"
			+ "\002\000\004\043\121\001\002\000\014\005\uffd9\006\uffd9"
			+ "\007\uffd9\034\012\043\uffee\001\002\000\004\043\uffef\001"
			+ "\002\000\004\043\ufff0\001\002\000\004\007\125\001\002"
			+ "\000\024\004\140\010\uffb4\014\130\016\126\017\135\020"
			+ "\127\032\142\035\041\043\uffb4\001\002\000\004\037\204"
			+ "\001\002\000\022\004\140\014\130\016\126\017\135\020"
			+ "\127\021\uffb4\032\142\035\041\001\002\000\020\026\037"
			+ "\035\041\036\044\037\042\053\046\055\040\056\050\001"
			+ "\002\000\014\010\uffb8\021\uffb8\023\uffb8\043\uffb8\054\uffb8"
			+ "\001\002\000\014\010\uffbb\021\uffbb\023\uffbb\043\uffbb\054"
			+ "\uffbb\001\002\000\012\010\uffe0\023\uffe0\043\173\054\uffe0"
			+ "\001\002\000\014\010\uffba\021\uffba\023\uffba\043\uffba\054"
			+ "\uffba\001\002\000\016\010\uffac\021\uffac\023\uffac\037\170"
			+ "\043\uffac\054\uffac\001\002\000\004\047\166\001\002\000"
			+ "\014\010\uffb7\021\uffb7\023\uffb7\043\uffb7\054\uffb7\001\002"
			+ "\000\020\026\037\035\041\036\044\037\042\053\046\055"
			+ "\040\056\050\001\002\000\004\010\161\001\002\000\004"
			+ "\037\156\001\002\000\012\010\uffde\023\uffde\043\uffde\054"
			+ "\uffde\001\002\000\014\010\uffb9\021\uffb9\023\uffb9\043\uffb9"
			+ "\054\uffb9\001\002\000\010\010\uffb0\023\146\054\147\001"
			+ "\002\000\024\004\140\010\uffb4\014\130\016\126\017\135"
			+ "\020\127\032\142\035\041\043\uffb4\001\002\000\020\026"
			+ "\037\035\041\036\044\037\042\053\046\055\040\056\050"
			+ "\001\002\000\004\010\151\001\002\000\014\010\uffb5\021"
			+ "\uffb5\023\uffb5\043\uffb5\054\uffb5\001\002\000\006\022\153"
			+ "\025\066\001\002\000\030\004\140\010\uffb4\014\130\016"
			+ "\126\017\135\020\127\023\uffb4\032\142\035\041\043\uffb4"
			+ "\054\uffb4\001\002\000\010\010\uffb3\023\uffb3\054\uffb3\001"
			+ "\002\000\004\010\uffb1\001\002\000\020\026\037\035\041"
			+ "\036\044\037\042\053\046\055\040\056\050\001\002\000"
			+ "\006\025\066\040\160\001\002\000\014\010\uffad\021\uffad"
			+ "\023\uffad\043\uffad\054\uffad\001\002\000\004\035\162\001"
			+ "\002\000\004\043\uffe9\001\002\000\006\022\164\025\066"
			+ "\001\002\000\030\004\140\010\uffb4\014\130\016\126\017"
			+ "\135\020\127\023\uffb4\032\142\035\041\043\uffb4\054\uffb4"
			+ "\001\002\000\010\010\uffb2\023\uffb2\054\uffb2\001\002\000"
			+ "\020\026\037\035\041\036\044\037\042\053\046\055\040"
			+ "\056\050\001\002\000\016\010\uffb6\021\uffb6\023\uffb6\025"
			+ "\066\043\uffb6\054\uffb6\001\002\000\020\026\037\035\041"
			+ "\036\044\037\042\053\046\055\040\056\050\001\002\000"
			+ "\006\025\066\040\172\001\002\000\014\010\uffab\021\uffab"
			+ "\023\uffab\043\uffab\054\uffab\001\002\000\030\004\140\010"
			+ "\uffb4\014\130\016\126\017\135\020\127\023\uffb4\032\142"
			+ "\035\041\043\uffb4\054\uffb4\001\002\000\012\010\uffdf\023"
			+ "\uffdf\043\uffdf\054\uffdf\001\002\000\006\015\176\025\066"
			+ "\001\002\000\024\004\140\010\uffb4\014\130\016\126\017"
			+ "\135\020\127\032\142\035\041\043\uffb4\001\002\000\004"
			+ "\010\200\001\002\000\014\010\uffaf\021\uffaf\023\uffaf\043"
			+ "\uffaf\054\uffaf\001\002\000\004\021\202\001\002\000\020"
			+ "\026\037\035\041\036\044\037\042\053\046\055\040\056"
			+ "\050\001\002\000\016\010\uffae\021\uffae\023\uffae\025\066"
			+ "\043\uffae\054\uffae\001\002\000\020\026\037\035\041\036"
			+ "\044\037\042\053\046\055\040\056\050\001\002\000\006"
			+ "\025\066\040\206\001\002\000\014\010\uffaa\021\uffaa\023"
			+ "\uffaa\043\uffaa\054\uffaa\001\002\000\006\006\uffdc\007\uffdc"
			+ "\001\002\000\004\037\uffed\001\002\000\004\037\213\001"
			+ "\002\000\006\043\uffea\050\230\001\002\000\010\005\214"
			+ "\035\uffe1\040\uffe6\001\002\000\004\035\uffe2\001\002\000"
			+ "\006\040\uffe7\043\225\001\002\000\004\040\224\001\002"
			+ "\000\004\035\022\001\002\000\006\040\uffe4\043\uffe4\001"
			+ "\002\000\006\044\025\050\222\001\002\000\010\012\030"
			+ "\013\033\030\034\001\002\000\006\040\uffe3\043\uffe3\001"
			+ "\002\000\006\043\uffe8\050\uffe8\001\002\000\006\005\214"
			+ "\035\uffe1\001\002\000\006\040\uffe5\043\uffe5\001\002\000"
			+ "\004\043\uffec\001\002\000\010\012\030\013\033\030\034"
			+ "\001\002\000\004\043\uffeb\001\002\000\024\004\140\010"
			+ "\uffb4\014\130\016\126\017\135\020\127\032\142\035\041"
			+ "\043\uffb4\001\002\000\004\010\234\001\002\000\004\035"
			+ "\235\001\002\000\004\045\236\001\002\000\004\002\uffff"
			+ "\001\002\000\004\051\240\001\002\000\020\026\037\035"
			+ "\041\036\044\037\042\053\046\055\040\056\050\001\002"
			+ "\000\006\025\066\043\ufffe\001\002\000\004\043\243\001"
			+ "\002\000\012\005\ufffd\006\ufffd\007\ufffd\035\ufffd\001\002"
			+ "" });

	/** Access to parse-action table. */
	public short[][] action_table() {
		return _action_table;
	}

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\241\000\004\002\004\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\004"
			+ "\056\010\001\001\000\012\017\012\024\013\025\014\026"
			+ "\015\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\006\006\116\010\117\001\001\000\006\023"
			+ "\017\027\020\001\001\000\002\001\001\000\004\005\022"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\010\003\031\004\030\030\026\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\030\031\042\032\055\033\052\034\034\035\046\036"
			+ "\044\037\050\040\054\041\035\042\051\046\053\001\001"
			+ "\000\002\001\001\000\002\001\001\000\012\037\107\040"
			+ "\054\041\035\042\051\001\001\000\002\001\001\000\004"
			+ "\061\071\001\001\000\026\031\067\032\055\033\052\034"
			+ "\034\035\046\036\044\037\050\040\054\041\035\042\051"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\012\037\064\040\054\041\035\042\051\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\022\033\057\034\034\035"
			+ "\046\036\044\037\050\040\054\041\035\042\051\001\001"
			+ "\000\002\001\001\000\004\030\061\001\001\000\002\001"
			+ "\001\000\014\036\063\037\050\040\054\041\035\042\051"
			+ "\001\001\000\002\001\001\000\002\001\001\000\024\032"
			+ "\066\033\052\034\034\035\046\036\044\037\050\040\054"
			+ "\041\035\042\051\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\004\043\100\001\001\000\002"
			+ "\001\001\000\026\031\074\032\055\033\052\034\034\035"
			+ "\046\036\044\037\050\040\054\041\035\042\051\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\032\031\103\032\055\033\052\034\034\035\046\036\044"
			+ "\037\050\040\054\041\035\042\051\044\101\045\102\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\026\031\105\032\055\033\052\034"
			+ "\034\035\046\036\044\037\050\040\054\041\035\042\051"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\016\035\113\036\044\037\050\040\054\041\035"
			+ "\042\051\001\001\000\020\034\112\035\046\036\044\037"
			+ "\050\040\054\041\035\042\051\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\016\007\122\012\121"
			+ "\017\012\024\123\025\014\026\015\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\026\021\140"
			+ "\022\132\041\130\042\135\047\142\050\131\051\133\052"
			+ "\144\054\143\055\136\001\001\000\002\001\001\000\022"
			+ "\041\130\042\135\047\200\050\131\051\133\052\144\054"
			+ "\143\055\136\001\001\000\026\031\174\032\055\033\052"
			+ "\034\034\035\046\036\044\037\050\040\054\041\035\042"
			+ "\051\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\026\031\162\032\055\033\052"
			+ "\034\034\035\046\036\044\037\050\040\054\041\035\042"
			+ "\051\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\004\053\147\001\001\000"
			+ "\026\021\154\022\132\041\130\042\135\047\142\050\131"
			+ "\051\133\052\144\054\143\055\136\001\001\000\026\031"
			+ "\151\032\055\033\052\034\034\035\046\036\044\037\050"
			+ "\040\054\041\035\042\051\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\026\021\153\022\132"
			+ "\041\130\042\135\047\142\050\131\051\133\052\144\054"
			+ "\143\055\136\001\001\000\002\001\001\000\002\001\001"
			+ "\000\026\031\156\032\055\033\052\034\034\035\046\036"
			+ "\044\037\050\040\054\041\035\042\051\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\026\021\164\022\132\041\130"
			+ "\042\135\047\142\050\131\051\133\052\144\054\143\055"
			+ "\136\001\001\000\002\001\001\000\026\031\166\032\055"
			+ "\033\052\034\034\035\046\036\044\037\050\040\054\041"
			+ "\035\042\051\001\001\000\002\001\001\000\026\031\170"
			+ "\032\055\033\052\034\034\035\046\036\044\037\050\040"
			+ "\054\041\035\042\051\001\001\000\002\001\001\000\002"
			+ "\001\001\000\022\041\130\042\135\047\173\050\131\051"
			+ "\133\052\144\054\143\055\136\001\001\000\002\001\001"
			+ "\000\002\001\001\000\026\021\176\022\132\041\130\042"
			+ "\135\047\142\050\131\051\133\052\144\054\143\055\136"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\026\031\202\032\055\033\052\034\034\035\046"
			+ "\036\044\037\050\040\054\041\035\042\051\001\001\000"
			+ "\002\001\001\000\026\031\204\032\055\033\052\034\034"
			+ "\035\046\036\044\037\050\040\054\041\035\042\051\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\004\060\210\001\001\000\004\013\211\001\001\000"
			+ "\004\011\226\001\001\000\012\014\215\015\214\016\217"
			+ "\020\216\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\004\005\220\001\001\000\002\001\001"
			+ "\000\002\001\001\000\010\003\222\004\030\030\026\001"
			+ "\001\000\002\001\001\000\002\001\001\000\006\016\225"
			+ "\020\216\001\001\000\002\001\001\000\002\001\001\000"
			+ "\010\003\230\004\030\030\026\001\001\000\002\001\001"
			+ "\000\026\021\232\022\132\041\130\042\135\047\142\050"
			+ "\131\051\133\052\144\054\143\055\136\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\026\031\240\032\055\033\052"
			+ "\034\034\035\046\036\044\037\050\040\054\041\035\042"
			+ "\051\001\001\000\004\057\241\001\001\000\002\001\001"
			+ "\000\002\001\001" });

	/** Access to <code>reduce_goto</code> table. */
	public short[][] reduce_table() {
		return _reduce_table;
	}

	/** Instance of action encapsulation class. */
	protected CUP$parser$actions action_obj;

	/** Action encapsulation object initializer. */
	protected void init_actions() {
		action_obj = new CUP$parser$actions(this);
	}

	/** Invoke a user supplied parse action. */
	public java_cup.runtime.Symbol do_action(int act_num,
			java_cup.runtime.lr_parser parser, java.util.Stack stack, int top)
			throws java.lang.Exception {
		/* call code in generated class */
		return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
	}

	/** Indicates start state. */
	public int start_state() {
		return 0;
	}

	/** Indicates start production. */
	public int start_production() {
		return 0;
	}

	/** <code>EOF</code> Symbol index. */
	public int EOF_sym() {
		return 0;
	}

	/** <code>error</code> Symbol index. */
	public int error_sym() {
		return 1;
	}

	public void report_error(String message, Object info) {

		goo.podeContinuar = false;

		System.out.print(message);

		if (!(info instanceof Symbol))
			return;
		Symbol symbol = (Symbol) info;

		if (symbol.left < 0 || symbol.right < 0)
			return;

		System.out.println(" at line " + symbol.left + ", column "
				+ symbol.right);
	}

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$parser$actions {

	arquivos arq = new arquivos();
	private SymbolTable ts = new SymbolTable();
	private final int CONST = 1;
	private final int FUN = 2;
	private final int MODULE = 3;
	private final int PARAM = 4;
	private final int UNDECL = 5;
	private final int VAR = 6;

	private final parser parser;

	/** Constructor */
	CUP$parser$actions(parser parser) {
		this.parser = parser;
	}

	/** Method with the actual generated action code. */
	public final java_cup.runtime.Symbol CUP$parser$do_action(
			int CUP$parser$act_num,
			java_cup.runtime.lr_parser CUP$parser$parser,
			java.util.Stack CUP$parser$stack, int CUP$parser$top)
			throws java.lang.Exception {
		/* Symbol object for return from actions */
		java_cup.runtime.Symbol CUP$parser$result;

		/* select the action based on the action number */
		switch (CUP$parser$act_num) {
		/* . . . . . . . . . . . . . . . . . . . . */
		case 90: // literal ::= FALSE
		{
			Exp RESULT = null;
			int fleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int fright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Object f = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;

			RESULT = new ExpBoolean(false);
			arq.addConteudo("literal ::= FALSE -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"literal",
							30,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 89: // literal ::= TRUE
		{
			Exp RESULT = null;
			int tleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int tright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Object t = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;

			RESULT = new ExpBoolean(true);
			arq.addConteudo("literal ::=  TRUE -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"literal",
							30,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 88: // literal ::= NUMBER
		{
			Exp RESULT = null;
			int nleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int nright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Object n = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;

			RESULT = new ExpValor(Integer.valueOf(n.toString()));
			arq.addConteudo("literal ::=  NUMBER -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"literal",
							30,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 87: // io_statement ::= READ OPAR expression CPAR
		{
			Com RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;

			RESULT = new ComExp(e);
			arq.addConteudo("io_statement ::=  READ OPAR expression CPAR -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"io_statement",
							43,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 3)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 86: // io_statement ::= WRITELN OPAR expression CPAR
		{
			Com RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;

			RESULT = new ComExp(e);
			arq.addConteudo("io_statement ::=  WRITELN OPAR expression CPAR -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"io_statement",
							43,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 3)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 85: // io_statement ::= WRITELN
		{
			Com RESULT = null;

			// RESULT =new ComIo(2,null);
			arq.addConteudo("io_statement ::=  WRITELN -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"io_statement",
							43,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 84: // io_statement ::= WRITE OPAR expression CPAR
		{
			Com RESULT = null;
			int wleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int wright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			Object w = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;

			RESULT = new ComExp(e);
			arq.addConteudo("io_statement ::=  WRITE OPAR expression CPAR -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"io_statement",
							43,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 3)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 83: // repetition ::= REPEAT statement UNTIL expression
		{
			Com RESULT = null;
			int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			Object r = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Com s = (Com) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int uleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int uright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Object u = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			RESULT = new ComRepeat(s, e);
			arq.addConteudo("repetition ::= REPEAT statement UNTIL expression -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"repetition",
							42,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 3)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 82: // repetition ::= WHILE expression DO statements END
		{
			Com RESULT = null;
			int wleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).left;
			int wright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).right;
			Object w = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).value;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			int dleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int dright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Object d = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Decla s = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;

			RESULT = new ComExpDecla(e, s, 2);
			arq.addConteudo("repetition ::= WHILE expression DO statements END  -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"repetition",
							42,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 4)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 81: // conditional_op ::=
		{
			Com RESULT = null;

			arq.addConteudo("conditional_op ::=  -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"conditional_op",
							41,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 80: // conditional_op ::= ELSE statements
		{
			Com RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Object e = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int sright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Decla s = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;

			RESULT = new ComElse(s);
			arq.addConteudo("onditional_op ::= ELSE statements -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"conditional_op",
							41,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 79: // conditional_list ::= IF expression THEN statements
		{
			Com RESULT = null;
			int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int iright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			Object i = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int tleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Object t = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int sright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Decla s = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;

			RESULT = new ComExpDecla(e, s, 1);
			arq.addConteudo("conditional_list ::= IF expression THEN statements -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"conditional_list",
							40,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 3)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 78: // conditional_list ::= conditional_list ELSIF expression THEN
					// statements
		{
			Com RESULT = null;
			int clleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).left;
			int clright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).right;
			Com cl = (Com) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).value;
			int elleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int elright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			Object el = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int tleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Object t = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int sright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Decla s = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;

			RESULT = new ComConditional(cl, new ComExpDecla(e, s, 0));
			arq.addConteudo("conditional_list ::= conditional_list ELSIF expression THEN statements -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"conditional_list",
							40,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 4)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 77: // conditional ::=
		{
			Com RESULT = null;

			arq.addConteudo("conditional ::=  -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"conditional",
							39,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 76: // conditional ::= conditional_list conditional_op END
		{
			Com RESULT = null;
			int clleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int clright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Com cl = (Com) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int coleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int coright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Com co = (Com) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;

			RESULT = new ComConditional(cl, co);
			arq.addConteudo("conditional ::= conditional_list conditional_op END -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"conditional",
							39,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 75: // assignment ::= variable ATRI expression
		{
			Com RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Exp v = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			RESULT = new ComAssignment(v, e);
			arq.addConteudo("assignment ::= variable ATRI expression	 -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"assignment",
							38,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 74: // statement ::= io_statement
		{
			Com RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Com a = (Com) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			RESULT = a;
			arq.addConteudo("statement ::= io_statement -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"statement",
							37,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 73: // statement ::= proccall
		{
			Com RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Exp a = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			RESULT = new ComExp(a);
			arq.addConteudo("statement ::= proccall -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"statement",
							37,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 72: // statement ::= repetition
		{
			Com RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Com a = (Com) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			RESULT = a;
			arq.addConteudo("statement ::= repetition -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"statement",
							37,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 71: // statement ::= conditional
		{
			Com RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Com a = (Com) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			RESULT = a;
			arq.addConteudo("statement ::= conditional -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"statement",
							37,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 70: // statement ::= assignment
		{
			Com RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Com a = (Com) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			RESULT = a;
			arq.addConteudo("statement ::= assignment -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"statement",
							37,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 69: // variable ::= ID PONTO SIZE
		{
			Exp RESULT = null;
			int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int idright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Object id = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int pleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int pright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Object p = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int sright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Object s = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;

			int idPos = Integer.MAX_VALUE;
			if (ts.lookup(id.toString()) != 0) {
				Info info = ts.get_info(ts.lookup(id.toString()));
				if (info.category() != VAR && info.category() != PARAM
						&& info.category() != UNDECL) {
					System.out.println("invalid " + id + " in expression");
				}
			} else {
				System.out.println("Variable not declared: " + id.toString());
				UndeclInfo inf = new UndeclInfo();
				inf.setName(id.toString());
				inf.setDeclared_line(CUP$parser$act_num);
				inf.setScope_level(ts.getScopeLevel());
				inf.setTypeOld("DEFINIR");
				idPos = ts.insert(id.toString(), inf);
			}
			RESULT = new ExpIdSize(ts.lookup(id.toString()), "SIZE");
			arq.addConteudo("variable ::= ID PONTO SIZE -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"variable",
							32,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 68: // variable ::= ID OOPAR expression OCPAR
		{
			Exp RESULT = null;
			int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int idright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			Object id = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;

			int idPos = Integer.MAX_VALUE;
			if (ts.lookup(id.toString()) != 0) {
				Info info = ts.get_info(ts.lookup(id.toString()));
				if (info.category() != PARAM && info.category() != VAR
						&& info.category() != UNDECL) {
					System.out.println("invalid " + id + " in expression");
				}
			} else {
				System.out.println("Variable not declared: " + id.toString());
				UndeclInfo inf = new UndeclInfo();
				inf.setName(id.toString());
				inf.setDeclared_line(CUP$parser$act_num);
				inf.setScope_level(ts.getScopeLevel());
				inf.setTypeOld("DEFINIR");
				idPos = ts.insert(id.toString(), inf);
			}
			RESULT = new ExpAtrib(ts.lookup(id.toString()), e);
			arq.addConteudo("ID OOPAR expression OCPAR -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"variable",
							32,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 3)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 67: // variable ::= ID
		{
			Exp RESULT = null;
			int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Object id = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;

			int idPos = Integer.MAX_VALUE;
			if (ts.lookup(id.toString()) != 0) {
				Info info = ts.get_info(ts.lookup(id.toString()));
				if (info.category() != VAR && info.category() != CONST
						&& info.category() != FUN && info.category() != PARAM
						&& info.category() != UNDECL) {
					System.out.println("invalid " + id + " in expression");
				}
			} else {
				System.out.println("Variable not declared: " + id.toString());
				UndeclInfo inf = new UndeclInfo();
				inf.setName(id.toString());
				inf.setDeclared_line(CUP$parser$act_num);
				inf.setScope_level(ts.getScopeLevel());
				inf.setTypeOld("DEFINIR");
				idPos = ts.insert(id.toString(), inf);
			}
			RESULT = new ExpId(ts.lookup(id.toString()));
			arq.addConteudo("variable ::= ID -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"variable",
							32,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 66: // actualpar_list ::= expression
		{
			Exp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			RESULT = e;
			arq.addConteudo("actualpar_list ::= expression  -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"actualpar_list",
							35,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 65: // actualpar_list ::= actualpar_list VIRGULA expression
		{
			Exp RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Exp a = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			RESULT = new ExpList(a, e);
			arq.addConteudo("actualpar_list ::= actualpar_list VIRGULA expression  -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"actualpar_list",
							35,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 64: // actualpar_op ::=
		{
			Exp RESULT = null;

			arq.addConteudo("actualpar_op ::=  -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"actualpar_op",
							34,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 63: // actualpar_op ::= actualpar_list
		{
			Exp RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Exp a = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			RESULT = a;
			arq.addConteudo("actualpar_op ::= actualpar_list -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"actualpar_op",
							34,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 62: // actualpar ::= OPAR actualpar_op CPAR
		{
			Exp RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Exp a = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;

			RESULT = a;
			arq.addConteudo("actualpar ::= OPAR actualpar_op CPAR -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"actualpar",
							33,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 61: // proccall ::= ID NT$3 actualpar
		{
			Exp RESULT = null;
			// propagate RESULT from NT$3
			RESULT = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int idright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Object id = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Exp a = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			RESULT = new ExpProcCall(ts.lookup(id.toString()), a);
			arq.addConteudo("proccall ::= ID actualpar -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"proccall",
							31,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 60: // NT$3 ::=
		{
			Exp RESULT = null;
			int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Object id = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;

			if (ts.lookup(id.toString()) != 0) {
				Info info = ts.get_info(ts.lookup(id.toString()));
				if (info.category() != FUN && info.category() != UNDECL) {
					System.out.println("invalid " + id + " in expression");
				}
			} else {
				System.out.println("Procedure not declared");
				UndeclInfo inf = new UndeclInfo();
				inf.setName(id.toString());
				inf.setDeclared_line(CUP$parser$act_num);
				inf.setScope_level(ts.getScopeLevel());
				inf.setTypeOld("DEFINIR");
				ts.insert(id.toString(), inf);
			}
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"NT$3",
							47,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 59: // primary ::= proccall
		{
			Exp RESULT = null;
			int pleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int pright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Exp p = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			RESULT = p;
			arq.addConteudo("primary ::= proccall -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"primary",
							29,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 58: // primary ::= variable
		{
			Exp RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int vright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Exp v = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			RESULT = v;
			arq.addConteudo("primary ::= variable -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"primary",
							29,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 57: // primary ::= literal
		{
			Exp RESULT = null;
			int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int lright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Exp l = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			RESULT = l;
			arq.addConteudo("primary ::= literal -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"primary",
							29,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 56: // primary ::= OPAR expression CPAR
		{
			Exp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;

			RESULT = e;
			arq.addConteudo("primary ::= OPAR expression CPAR -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"primary",
							29,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 55: // factor ::= primary
		{
			Exp RESULT = null;
			int pleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int pright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Exp p = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			RESULT = p;
			arq.addConteudo("factor ::= primary -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"factor",
							28,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 54: // factor ::= NOT primary
		{
			Exp RESULT = null;
			int nleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int nright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Object n = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int pleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int pright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Exp p = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			RESULT = new ExpFactor("NOT", p);
			arq.addConteudo("factor ::= NOT primary -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"factor",
							28,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 53: // factor ::= ADDLOP primary
		{
			Exp RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Object a = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int pleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int pright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Exp p = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			RESULT = new ExpFactor(a.toString(), p);
			arq.addConteudo("factor ::= ADDLOP primary -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"factor",
							28,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 52: // term ::= factor
		{
			Exp RESULT = null;
			int fleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int fright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Exp f = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			RESULT = f;
			arq.addConteudo("term ::= factor -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"term",
							27,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 51: // term ::= term MULTOP factor
		{
			Exp RESULT = null;
			int tleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int tright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Exp t = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int mleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int mright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Object m = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int fleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int fright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Exp f = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			RESULT = new ExpBinary(t, m.toString(), f);
			arq.addConteudo("term ::= term MULTOP factor -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"term",
							27,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 50: // aritexp ::= term
		{
			Exp RESULT = null;
			int tleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int tright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Exp t = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			RESULT = t;
			arq.addConteudo("aritexp ::= term -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"aritexp",
							26,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 49: // aritexp ::= aritexp ADDLOP term
		{
			Exp RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Exp a = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int lleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int lright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Object l = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int tleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int tright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Exp t = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			RESULT = new ExpBinary(a, l.toString(), t);
			arq.addConteudo("aritexp ::= aritexp ADDOP term -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"aritexp",
							26,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 48: // relexp ::= aritexp
		{
			Exp RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Exp a = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			RESULT = a;
			arq.addConteudo("relexp ::= aritexp -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"relexp",
							25,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 47: // relexp ::= aritexp RELOP aritexp
		{
			Exp RESULT = null;
			int a1left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int a1right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Exp a1 = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Object r = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int a2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int a2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Exp a2 = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			RESULT = new ExpBinary(a1, r.toString(), a2);
			arq.addConteudo("relexp ::= aritexp RELOP aritexp -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"relexp",
							25,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 46: // andexp ::= relexp
		{
			Exp RESULT = null;
			int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int rright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Exp r = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			RESULT = r;
			arq.addConteudo("andexp ::= relexp -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"andexp",
							24,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 45: // andexp ::= andexp AND relexp
		{
			Exp RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Exp a = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int rright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Exp r = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			RESULT = new ExpBinary(a, "AND", r);
			arq.addConteudo("andexp ::= andexp AND relexp -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"andexp",
							24,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 44: // expression ::= andexp
		{
			Exp RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Exp a = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			RESULT = a;
			arq.addConteudo("expression ::= andexp -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"expression",
							23,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 43: // expression ::= expression OR andexp
		{
			Exp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Exp a = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			RESULT = new ExpBinary(e, "OR", a);
			arq.addConteudo("expression ::= expression OR andexp -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"expression",
							23,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 42: // var_opt ::=
		{
			Decla RESULT = null;

			arq.addConteudo("var_opt ::=  -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"var_opt",
							21,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 41: // var_opt ::= vardecl
		{
			Decla RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int vright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Decla v = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;

			RESULT = v;
			arq.addConteudo("var_opt ::= vardecl -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"var_opt",
							21,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 40: // const_opt ::=
		{
			Decla RESULT = null;

			arq.addConteudo("const_opt ::=  -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"const_opt",
							20,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 39: // const_opt ::= constdecl
		{
			Decla RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Decla c = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;

			RESULT = c;
			arq.addConteudo("const_opt ::= constdecl -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"const_opt",
							20,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 38: // decl_list ::= const_opt var_opt
		{
			Decla RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Decla c = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int vright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Decla v = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;

			RESULT = new DeclaDeclaDecla(c, v);
			arq.addConteudo("decl_list ::= const_opt var_opt -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"decl_list",
							19,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 37: // decl_list ::= decl_list procdecl PONTOVIRGULA
		{
			Decla RESULT = null;
			int dleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int dright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Decla d = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int pleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int pright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Decla p = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;

			RESULT = new DeclaDeclaDecla(d, p);
			arq.addConteudo("decl_list ::=  decl_list procdecl PONTOVIRGULA  -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"decl_list",
							19,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 36: // declarations ::= decl_list
		{
			Decla RESULT = null;
			int dleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int dright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Decla d = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;

			RESULT = d;
			arq.addConteudo("declarations ::= decl_list -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"declarations",
							18,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 35: // statements_list ::= statement
		{
			Decla RESULT = null;
			int stleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int stright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Com st = (Com) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			RESULT = new DeclaCom(st);
			arq.addConteudo("statements_list ::= statement -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"statements_list",
							16,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 34: // statements_list ::= statements_list PONTOVIRGULA statement
		{
			Decla RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Decla s = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int stleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int stright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Com st = (Com) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			RESULT = new DeclaStatements(s, st);
			arq.addConteudo("statements_list ::= statements_list PONTOVIRGULA statement -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"statements_list",
							16,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 33: // statements ::= statements_list
		{
			Decla RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int sright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Decla s = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;

			RESULT = s;
			arq.addConteudo("statements ::= statements_list -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"statements",
							15,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 32: // fpsection_op ::=
		{
			Decla RESULT = null;

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"fpsection_op",
							14,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 31: // fpsection_op ::= VAR
		{
			Decla RESULT = null;

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"fpsection_op",
							14,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 30: // fpsection ::= fpsection_op idlist PONTOPONTO vartype
		{
			Decla RESULT = null;
			int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int iright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Decla i = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int vright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Decla v = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;

			String type = "";
			if (v instanceof DeclaArrayType) {
				DeclaArrayType temp = (DeclaArrayType) v;
				type = ((DeclaVartype) temp.getDecla()).getVartype();
			} else {
				type = ((DeclaVartype) v).getVartype();
			}
			int[] values = ts.current_scope().get_values();
			Info infoaux;
			for (int x = 0; x < values.length; x++) {
				infoaux = ts.get_info(values[x]);
				if (infoaux.category() == VAR
						&& infoaux.getTypeOld().equals("DEFINIR")) {
					infoaux.setTypeOld(type);
					ParamInfo pi = new ParamInfo();
					pi.setDeclared_line(infoaux.getDeclared_line());
					pi.setName(infoaux.getName());
					pi.setScope_level(pi.getScope_level());
					pi.setType(infoaux.getType());
					pi.setTypeOld(type);
					pi.setUsed_lines(infoaux.getUsed_lines());
					if (v instanceof DeclaArrayType)
						pi.setTypeOld("ARRAY" + type);
					ts.edit_info(values[x], pi);
				}
			}
			RESULT = new DeclaDeclaDecla(i, v);
			arq.addConteudo("fpsection ::= fpsection_op idlist PONTOPONTO vartype -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"fpsection",
							12,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 3)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 29: // formalpars_list ::= fpsection
		{
			Decla RESULT = null;
			int fpleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int fpright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Decla fp = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;

			RESULT = fp;
			arq.addConteudo("formalpars_list ::= fpsection -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"formalpars_list",
							11,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 28: // formalpars_list ::= formalpars_list PONTOVIRGULA fpsection
		{
			Decla RESULT = null;
			int fleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int fright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Decla f = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int fpleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int fpright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Decla fp = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;

			RESULT = new DeclaDeclaDecla(f, fp);
			arq.addConteudo("formalpars_list ::= formalpars_list PONTOVIRGULA fpsection  -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"formalpars_list",
							11,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 27: // formalpars_op ::=
		{
			Decla RESULT = null;

			arq.addConteudo("formalpars_op ::=  -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"formalpars_op",
							10,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 26: // formalpars_op ::= formalpars_list
		{
			Decla RESULT = null;
			int fleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int fright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Decla f = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;

			RESULT = f;
			arq.addConteudo("formalpars_op ::= formalpars_list -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"formalpars_op",
							10,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 25: // formalpars ::= OPAR formalpars_op CPAR
		{
			Decla RESULT = null;
			int fleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int fright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Decla f = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;

			ts.create_scope();
			RESULT = f;
			ts.remove_scope();
			arq.addConteudo("formalpars ::= OPAR formalpars_op CPAR -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"formalpars",
							9,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 24: // procbody ::= declarations BEGIN statements END ID
		{

			Decla RESULT = null;
			int dleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).left;
			int dright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).right;
			Decla d = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).value;
			int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Decla s = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Object id = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;

			ts.remove_scope();
			if (ts.at_current_scope(id.toString())) {
				Info info = ts.get_info(ts.lookup(id.toString()));
				if (info.category() != FUN) {
					System.out.println("wrong procedure id ended");
				}
			} else {
				System.out.println("wrong procedure id ended");
			}

			RESULT = new DeclaProcBody(d, s, ts.lookup(id.toString()));
			arq.addConteudo("procbody ::= declarations BEGIN statements END ID -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"procbody",
							8,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 4)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 23: // procheader_op ::=
		{
			Decla RESULT = null;

			arq.addConteudo("procheader_op ::=  -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"procheader_op",
							7,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 22: // procheader_op ::= PONTOPONTO vartype
		{
			Decla RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int vright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Decla v = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;

			RESULT = v;
			arq.addConteudo("procheader_op ::= PONTOPONTO vartype -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"procheader_op",
							7,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 21: // procheader ::= PROCEDURE ID NT$2 formalpars procheader_op
		{

			Decla RESULT = null;
			// propagate RESULT from NT$2
			RESULT = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int iright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			Object i = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			int fleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int fright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Decla f = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int pleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int pright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Decla p = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;

			String type = "DEFINIR";
			if (p != null) {
				type = ((DeclaVartype) p).getVartype();
			} else
				type = "VOID";

			Info infoaux;

			int index = ts.lookup(i.toString());

			infoaux = ts.get_info(index);
			if (infoaux.category() == FUN
					&& infoaux.getTypeOld().equals("DEFINIR")) {
				infoaux.setTypeOld(type);
				ts.edit_info(index, (FunInfo) infoaux);
			}

			VarInfo inf = new VarInfo();
			inf.setName("result");
			inf.setTypeOld(type);
			Type t = Decla.VOID;
			if (type.equals("INTEGER")) {
				t = Decla.INT;
			} else if (type.equals("BOOLEAN")) {
				t = Decla.BOOL;
			}
			inf.setType(t);
			ts.insert("result", inf);

			RESULT = new DeclaProcHeader(ts.lookup(i.toString()), f, p);
			arq.addConteudo("procheader ::= PROCEDURE ID formalpars procheader_op -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"procheader",
							6,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 4)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 20: // NT$2 ::=
		{
			Decla RESULT = null;
			int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int iright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Object i = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;

			if (ts.at_current_scope(i.toString())) {
				System.out.println("variable " + i.toString()
						+ " is already declared");
			} else {
				FunInfo inf = new FunInfo();
				inf.setName(i.toString());
				inf.setDeclared_line(CUP$parser$act_num);
				inf.setScope_level(ts.getScopeLevel());
				inf.setTypeOld("DEFINIR");
				ts.insert(i.toString(), inf);
				ts.create_scope();
			}

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"NT$2",
							46,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 19: // procdecl_op ::=
		{
			Decla RESULT = null;

			ts.remove_scope();
			arq.addConteudo("procdecl_op ::=  -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"procdecl_op",
							5,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 18: // procdecl_op ::= procbody
		{
			Decla RESULT = null;
			int pleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int pright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Decla p = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;

			RESULT = p;
			arq.addConteudo("procdecl_op ::= procbody  -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"procdecl_op",
							5,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 17: // procdecl ::= procheader PONTOVIRGULA procdecl_op
		{
			Decla RESULT = null;
			int pleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int pright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Decla p = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int popleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int popright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Decla pop = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;

			RESULT = new DeclaDeclaDecla(p, pop);
			arq.addConteudo("procdecl ::= procheader PONTOVIRGULA procdecl_op -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"procdecl",
							4,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 16: // arraytype_op ::=
		{
			Exp RESULT = null;

			arq.addConteudo("arraytype_op ::=  -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"arraytype_op",
							36,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 15: // arraytype_op ::= expression
		{
			Exp RESULT = null;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			RESULT = e;
			arq.addConteudo("arraytype_op ::= expression -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"arraytype_op",
							36,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 14: // arraytype ::= ARRAY arraytype_op OF simpletype
		{
			Decla RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Exp a = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int sright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Decla s = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;

			RESULT = new DeclaArrayType(a, s);
			arq.addConteudo("arraytype ::= ARRAY arraytype_op OF simpletype -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"arraytype",
							2,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 3)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 13: // simpletype ::= INTEGER
		{
			Decla RESULT = null;

			RESULT = new DeclaVartype("INTEGER");
			arq.addConteudo("vartype ::= INTEGER -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"simpletype",
							22,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 12: // simpletype ::= BOOLEAN
		{
			Decla RESULT = null;

			RESULT = new DeclaVartype("BOOLEAN");
			arq.addConteudo("vartype ::= BOOLEAN -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"simpletype",
							22,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 11: // vartype ::= arraytype
		{
			Decla RESULT = null;
			int aleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int aright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Decla a = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;

			RESULT = a;
			arq.addConteudo("vartype ::= arraytype -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"vartype",
							1,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 10: // vartype ::= simpletype
		{
			Decla RESULT = null;
			int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int sright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Decla s = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;

			RESULT = s;

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"vartype",
							1,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 9: // idlist ::= ID
		{
			Decla RESULT = null;
			int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Object id = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;

			int idPos = Integer.MAX_VALUE;
			if (ts.at_current_scope(id.toString())) {
				System.out.println("variable " + id.toString()
						+ " is already declared");
			} else {
				VarInfo inf = new VarInfo();
				inf.setName(id.toString());
				inf.setDeclared_line(CUP$parser$act_num);
				inf.setScope_level(ts.getScopeLevel());
				inf.setTypeOld("DEFINIR");
				idPos = ts.insert(id.toString(), inf);
				RESULT = new DeclaId(ts.lookup(id.toString()));
				arq.addConteudo("idlist_list ::= ID -- Linha do lookahead:"
						+ CUP$parser$act_num + "\n");
			}

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"idlist",
							3,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 8: // idlist ::= idlist VIRGULA ID
		{
			Decla RESULT = null;
			int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int iright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Decla i = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Object id = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.peek()).value;

			int idPos = Integer.MAX_VALUE;
			if (ts.at_current_scope(id.toString())) {
				System.out.println("variable " + id.toString()
						+ " is already declared");
			} else {
				VarInfo inf = new VarInfo();
				inf.setName(id.toString());
				inf.setDeclared_line(CUP$parser$act_num);
				inf.setScope_level(ts.getScopeLevel());
				inf.setTypeOld("DEFINIR");
				idPos = ts.insert(id.toString(), inf);
				RESULT = new DeclaIdList(ts.lookup(id.toString()), i);
				arq.addConteudo("idlist_list ::= idlist_list VIRGULA ID -- Linha do lookahead:"
						+ CUP$parser$act_num + "\n");
			}

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"idlist",
							3,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 2)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 7: // vardecl ::= VAR
		{
			Decla RESULT = null;

			arq.addConteudo("vardecl ::= VAR -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"vardecl",
							17,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 6: // vardecl ::= vardecl idlist PONTOPONTO vartype PONTOVIRGULA
		{
			Decla RESULT = null;
			int vleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).left;
			int vright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).right;
			Decla v = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).value;
			int ileft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int iright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			Decla i = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			int varleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int varright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Decla var = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;

			String type = "";
			if (var instanceof DeclaArrayType) {
				DeclaArrayType temp = (DeclaArrayType) var;
				type = ((DeclaVartype) temp.getDecla()).getVartype();
			} else {
				type = ((DeclaVartype) var).getVartype();
			}

			int[] values = ts.current_scope().get_values();
			Info infoaux;
			for (int x = 0; x < values.length; x++) {
				infoaux = ts.get_info(values[x]);
				if (infoaux.category() == VAR
						&& infoaux.getTypeOld().equals("DEFINIR")) {
					infoaux.setTypeOld(type);
					if (var instanceof DeclaArrayType)
						infoaux.setTypeOld("ARRAY" + type);
					ts.edit_info(values[x], (VarInfo) infoaux);
				}
			}
			RESULT = new DeclaDeclaDecla(v, new DeclaDeclaDecla(i, var));
			arq.addConteudo("vardecl ::= vardecl idlist PONTOPONTO nad PONTOVIRGULA  -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"vardecl",
							17,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 4)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 5: // constdecl ::= CONST
		{
			Decla RESULT = null;

			arq.addConteudo("constdecl ::= CONST -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"constdecl",
							13,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 4: // constdecl ::= constdecl ID RELOP expression NT$1 PONTOVIRGULA
		{
			Decla RESULT = null;
			// propagate RESULT from NT$1
			RESULT = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).right;
			Decla c = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).value;
			int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).left;
			int idright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).right;
			Object id = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 4)).value;
			int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int rright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			Object r = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;

			if (!r.equals("=")) {
				System.out.println("ERRO na declaraçao de Const");
				System.out.println("Linha: " + rleft);
				System.out.println("Coluna: " + rright);
				goo.podeContinuar = false;
			}

			RESULT = new DeclaDeclaDecla(c, new DeclaConst(ts.lookup(id
					.toString()), e));
			arq.addConteudo("constdecl ::= constdecl ID IGUAL Exp PONTOVIRGULA -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"constdecl",
							13,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 5)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 3: // NT$1 ::=
		{
			Decla RESULT = null;
			int cleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int cright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			Decla c = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).left;
			int idright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).right;
			Object id = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 2)).value;
			int eleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
			int eright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
			Exp e = (Exp) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

			if (ts.at_current_scope(id.toString())) {
				System.out.println("variable " + id.toString()
						+ " is already declared");
			} else {
				ConstInfo inf = new ConstInfo();
				inf.setName(id.toString());
				inf.setTypeOld("INTEGER");
				inf.setDeclared_line(CUP$parser$act_num);
				inf.setScope_level(ts.getScopeLevel());
				ts.insert(id.toString(), inf);
			}

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"NT$1",
							45,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 2: // module ::= MODULE ID PONTOVIRGULA NT$0 declarations BEGIN
				// statements END ID PONTO
		{
			Object RESULT = null;
			// propagate RESULT from NT$0
			RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 6)).value;
			int id1left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 8)).left;
			int id1right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 8)).right;
			Object id1 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 8)).value;
			int dleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).left;
			int dright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).right;
			Decla d = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 5)).value;
			int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).left;
			int sright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).right;
			Decla s = (Decla) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 3)).value;
			int id2left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int id2right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Object id2 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;

			if (ts.at_current_scope(id2.toString())) {
				Info info = ts.get_info(ts.lookup(id2.toString()));
				if (info.category() != MODULE) {
					System.out.println("wrong id ended at "
							+ CUP$parser$act_num);
				}
			} else {
				System.out.println("wrong id ended at " + CUP$parser$act_num);
			}

			RESULT = new Module(ts.lookup(id1.toString()), d, s, ts.lookup(id2
					.toString()));
			arq.addConteudo("module ::= MODULE ID PONTOVIRGULA declarations BEGIN statements END ID PONTO -- Linha do lookahead:"
					+ CUP$parser$act_num + "\n");
			ts.remove_scope();

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"module",
							0,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 9)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 1: // NT$0 ::=
		{
			Object RESULT = null;
			int id1left = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int id1right = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Object id1 = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;

			ModuleInfo inf = new ModuleInfo();
			inf.setName(id1.toString());
			inf.setDeclared_line(CUP$parser$act_num);
			inf.setScope_level(ts.getScopeLevel());
			ts.insert(id1.toString(), inf);

			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"NT$0",
							44,
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			return CUP$parser$result;

			/* . . . . . . . . . . . . . . . . . . . . */
		case 0: // $START ::= module EOF
		{
			Object RESULT = null;
			int start_valleft = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).left;
			int start_valright = ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).right;
			Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack
					.elementAt(CUP$parser$top - 1)).value;
			RESULT = start_val;
			CUP$parser$result = parser
					.getSymbolFactory()
					.newSymbol(
							"$START",
							0,
							((java_cup.runtime.Symbol) CUP$parser$stack
									.elementAt(CUP$parser$top - 1)),
							((java_cup.runtime.Symbol) CUP$parser$stack.peek()),
							RESULT);
		}
			/* ACCEPT */
			CUP$parser$parser.done_parsing();
			return CUP$parser$result;

			/* . . . . . . */
		default:
			throw new Exception(
					"Invalid action number found in internal parse table");

		}
	}
}
